/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/contacts": {
    post: operations["Tour_Contact"];
  };
  "/v1/orders": {
    post: operations["Tour_CreateOrder"];
  };
  "/v1/tourorders": {
    get: operations["Tour_ListOrders"];
  };
  "/v1/tours": {
    get: operations["Tour_TourList"];
  };
  "/v1/tours/{id}/content": {
    get: operations["Tour_TourContent"];
  };
  "/v1/tours/{id}/packages": {
    get: operations["Tour_TourPackages"];
  };
  "/v1/tourvouchers": {
    post: operations["Tour_VoucherAdmin"];
  };
  "/v1/vouchers": {
    post: operations["Tour_Voucher"];
  };
  "/v2/checkout/{packageDateID}": {
    get: operations["Tour_GetCheckout"];
  };
  "/v2/pdp/{tripID}": {
    get: operations["Tour_GetPDP"];
  };
  "/v2/search": {
    post: operations["Tour_Search"];
  };
  "/v2/trips": {
    get: operations["Tour_TripList"];
  };
  "/v2/trips/suggestions": {
    get: operations["Tour_TripSuggestions"];
  };
  "/v2/zones/{zoneType}": {
    get: operations["Tour_FrequenciesCity"];
  };
  "/v2/zones/{zoneType}/{locationType}/search/{cityName}": {
    get: operations["Tour_SearchZone"];
  };
}

export interface definitions {
  apitourCalendar: {
    dates?: definitions["apitourDates"][];
    defaultDate?: definitions["apitourDates"];
    /** Format: int64 */
    basePrice?: string;
  };
  apitourCategory: {
    category?: string;
    items?: definitions["tourCategoryItem"][];
  };
  apitourData: {
    image?: string;
    name?: string;
    type?: string;
    /** Format: int64 */
    star?: string;
    description?: string;
    pricing?: definitions["apitourPricing"][];
    packageDateId?: string;
    images?: string[];
  };
  apitourDates: {
    id?: string;
    title?: string;
  };
  apitourGetCheckoutResponse: {
    accommodation?: definitions["apitourGetCheckoutResponseAccommodation"];
    tripType?: string;
    startDate?: string;
    endDate?: string;
    /** Format: int64 */
    nightNo?: string;
    transport?: definitions["apitourGetCheckoutResponseTransport"];
    /** Format: int64 */
    adultNo?: string;
    /** Format: int64 */
    childNoWithBed?: string;
    /** Format: int64 */
    childNoWithoutBed?: string;
    /** Format: int64 */
    infantNo?: string;
    /** Format: int64 */
    adultPriceSingle?: string;
    /** Format: int64 */
    adultPriceDouble?: string;
    /** Format: int64 */
    childPriceWithBed?: string;
    /** Format: int64 */
    childPriceWithoutBed?: string;
    /** Format: int64 */
    infantPrice?: string;
    /** Format: int64 */
    additionalServicePrice?: string;
    isOneDay?: boolean;
  };
  apitourGetCheckoutResponseAccommodation: {
    type?: string;
    name?: string;
  };
  apitourGetCheckoutResponseTransport: {
    type?: string;
    name?: string;
  };
  apitourItem: {
    id?: string;
    type?: string;
    image?: string;
    title?: string;
    priceDescription?: string;
    /** Format: int64 */
    basePrice?: string;
    badge?: string;
    slug?: string;
  };
  apitourList: {
    title?: string;
    type?: string;
    /** Format: int64 */
    count?: string;
    trips?: definitions["apitourTripList"][];
  };
  apitourLocation: {
    persianName?: string;
    englishName?: string;
    isoCode?: string;
  };
  apitourPDPAccommodation: {
    type?: string;
    data?: definitions["apitourData"][];
  };
  apitourPDPCancellationPolicy: {
    description?: string;
    policies?: definitions["apitourPolicies"][];
  };
  apitourPagination: {
    /** Format: int32 */
    totalCount?: number;
    /** Format: int32 */
    pageCount?: number;
    /** Format: int32 */
    currentPage?: number;
    /** Format: int32 */
    totalPage?: number;
  };
  apitourPolicies: {
    title?: string;
    subtitle?: string;
  };
  apitourPricing: {
    title?: string;
    /** Format: int64 */
    price?: string;
  };
  apitourServices: {
    icon?: string;
    name?: string;
  };
  apitourTripList: {
    title?: string;
    /** Format: int64 */
    basePrice?: string;
    image?: string;
    badge?: string;
    location?: definitions["apitourLocation"];
  };
  apitoursearchLocation: {
    persianName?: string;
    englishName?: string;
    isoCode?: string;
  };
  protobufAny: {
    "@type"?: string;
  } & { [key: string]: unknown };
  rpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
  tourAttraction: {
    title?: string;
    description?: string;
  };
  tourCategoryItem: {
    id?: string;
    title?: string;
    image?: string;
    month?: string;
  };
  tourContactRequest: {
    fullName?: string;
    mobile?: string;
  };
  tourContactResponse: {
    message?: string;
  };
  tourContentResponse: {
    banner?: string;
    title?: string;
    description?: string;
    tourServices?: definitions["tourTourService"];
    tourItinerary?: definitions["tourContentResponseItinerary"];
    tourAttraction?: definitions["tourAttraction"];
  };
  tourContentResponseItinerary: {
    title?: string;
    description?: string;
    image?: string;
  };
  tourCreateOrderRequest: {
    packageDateId?: string;
    nationalCode?: string;
    firstName?: string;
    lastName?: string;
    mobileNumber?: string;
    email?: string;
    passportNumber?: string;
    passportExpireDate?: string;
    adultNo?: string;
    childNoWithBed?: string;
    childNoWithoutBed?: string;
    infantNo?: string;
    description?: string;
    totalPrice?: string;
    tourName?: string;
  };
  tourCreateOrderResponse: {
    orderId?: string;
  };
  tourFrequenciesResponse: {
    originFrequency?: definitions["tourFrequency"][];
    destinationFrequency?: definitions["tourFrequency"][];
  };
  tourFrequency: {
    persianName?: string;
    englishName?: string;
    isoCode?: string;
  };
  tourGetPDPResponse: {
    id?: string;
    title?: string;
    content?: string;
    itinerary?: definitions["tourGetPDPResponseItinerary"];
    cancellationPolicy?: definitions["apitourPDPCancellationPolicy"];
    calendar?: definitions["apitourCalendar"];
    accommodation?: definitions["apitourPDPAccommodation"];
    services?: definitions["apitourServices"][];
    requirementDocuments?: string[];
    images?: string[];
  };
  tourGetPDPResponseItinerary: {
    image?: string;
    description?: string;
    images?: string[];
  };
  tourListResponse: {
    tours?: definitions["apitourItem"][];
  };
  tourOrderFilterResponse: {
    /** @description List of orders matching the filter criteria */
    orders?: definitions["tourOrderItem"][];
    /**
     * Format: int64
     * @description Total count of orders matching the filter criteria
     */
    totalCount?: string;
    /**
     * Format: int32
     * @description Total number of pages
     */
    totalPages?: number;
    /**
     * Format: int32
     * @description Current page number
     */
    page?: number;
    /**
     * Format: int32
     * @description Number of items per page
     */
    pageSize?: number;
  };
  tourOrderItem: {
    /** @description Order ID */
    id?: string;
    /** @description Related booking ID */
    bookingId?: string;
    /** @description User ID */
    userId?: string;
    /** @description Order status */
    status?: string;
    /** @description Reason for the current status */
    statusReason?: string;
    /**
     * Format: int32
     * @description Status code
     */
    statusCode?: number;
    /** @description Reference Retrieval Number */
    rrn?: string;
    /** @description Provider Reference Retrieval Number */
    providerRrn?: string;
    /**
     * Format: int64
     * @description Order fee
     */
    fee?: string;
    /**
     * Format: int64
     * @description Order amount
     */
    amount?: string;
    /**
     * Format: int64
     * @description Base amount
     */
    baseAmount?: string;
    /** @description Whether the order is international */
    isInternational?: boolean;
    /** @description Tour name */
    tourName?: string;
    /**
     * Format: int64
     * @description Number of passengers
     */
    passengerCount?: string;
    /** @description User phone number */
    phoneNumber?: string;
    /** @description User email */
    email?: string;
    /** @description Order creation date */
    createdAt?: string;
    /** @description Order last update date */
    updatedAt?: string;
    /** @description Order origin */
    origin?: string;
    /** @description Order destination */
    destination?: string;
    /** @description Agency name */
    agencyName?: string;
    /** @description User firstname */
    userFirstName?: string;
    /** @description User lastname */
    userLastName?: string;
  };
  tourPackageListResponse: {
    packages?: definitions["tourPackageResponse"][];
  };
  tourPackageResponse: {
    hotelName?: string;
    departureDate?: string;
    returnDate?: string;
    /** Format: int64 */
    nightCount?: string;
    /** Format: int64 */
    dayCount?: string;
    transportation?: string;
    /** Format: int64 */
    adultDoublePrice?: string;
    /** Format: int64 */
    adultSinglePrice?: string;
    /** Format: int64 */
    childPriceWithBed?: string;
    /** Format: int64 */
    childPriceWithoutBed?: string;
    /** Format: int64 */
    infantPrice?: string;
    /** Format: int64 */
    additionalServicePrice?: string;
    /** Format: int64 */
    adultDoublePriceUsd?: string;
    /** Format: int64 */
    adultSinglePriceUsd?: string;
    /** Format: int64 */
    childPriceWithBedUsd?: string;
    /** Format: int64 */
    childPriceWithoutBedUsd?: string;
    /** Format: int64 */
    infantPriceUsd?: string;
    /** Format: int64 */
    additionalServicePriceUsd?: string;
    packageId?: string;
    packageDateId?: string;
  };
  tourSearchRequest: {
    origin?: string;
    destination?: string;
    type?: string;
    passenger?: definitions["tourSearchRequestPassenger"];
    filter?: definitions["tourSearchRequestFilter"];
    sortBy?: string;
    /** Format: int32 */
    pageNumber?: number;
  };
  tourSearchRequestFilter: {
    availableMonths?: definitions["tourSearchRequestFilterAvailableMonth"][];
    priceRange?: definitions["tourSearchRequestPriceRange"];
    accommodationType?: string[];
    durations?: string[];
    transportType?: string[];
    facilities?: string[];
  };
  tourSearchRequestFilterAvailableMonth: {
    startFrom?: string;
    startTo?: string;
  };
  tourSearchRequestPassenger: {
    /** Format: int64 */
    adult?: string;
    children?: string[];
  };
  tourSearchRequestPriceRange: {
    /** Format: int64 */
    min?: string;
    /** Format: int64 */
    max?: string;
  };
  tourSearchResponse: {
    data?: definitions["tourSearchResponseData"][];
    sortList?: definitions["tourSearchResponseSortList"][];
    filter?: definitions["tourSearchResponseFilter"];
    pagination?: definitions["apitourPagination"];
    requestID?: string;
  };
  tourSearchResponseData: {
    id?: string;
    title?: string;
    images?: string[];
    transport?: definitions["tourSearchResponseDataTransport"];
    facilities?: string[];
    /** Format: int64 */
    basePrice?: string;
  };
  tourSearchResponseDataTransport: {
    type?: string;
    title?: string;
  };
  tourSearchResponseFilter: {
    availableMonths?: definitions["tourSearchResponseFilterAvailableMonths"];
    priceRange?: definitions["tourSearchResponseFilterPriceRange"];
    accommodationType?: definitions["tourSearchResponseFilterAccommodationType"];
    durations?: definitions["tourSearchResponseFilterDurations"];
    transportType?: definitions["tourSearchResponseFilterTransportType"];
    facilities?: definitions["tourSearchResponseFilterFacilities"];
  };
  tourSearchResponseFilterAccommodationType: {
    title?: string;
    data?: definitions["tourSearchResponseFilterAccommodationTypeData"][];
  };
  tourSearchResponseFilterAccommodationTypeData: {
    persianName?: string;
    key?: string;
  };
  tourSearchResponseFilterAvailableMonths: {
    title?: string;
    data?: definitions["tourSearchResponseFilterAvailableMonthsData"][];
  };
  tourSearchResponseFilterAvailableMonthsData: {
    persianName?: string;
    startFrom?: string;
    startTo?: string;
  };
  tourSearchResponseFilterDurations: {
    title?: string;
    data?: definitions["tourSearchResponseFilterDurationsData"][];
  };
  tourSearchResponseFilterDurationsData: {
    title?: string;
    duration?: string;
  };
  tourSearchResponseFilterFacilities: {
    title?: string;
    data?: definitions["tourSearchResponseFilterFacilitiesData"][];
  };
  tourSearchResponseFilterFacilitiesData: {
    title?: string;
    key?: string;
  };
  tourSearchResponseFilterPriceRange: {
    title?: string;
    data?: definitions["tourSearchResponseFilterPriceRangeData"];
  };
  tourSearchResponseFilterPriceRangeData: {
    /** Format: int64 */
    min?: string;
    /** Format: int64 */
    max?: string;
  };
  tourSearchResponseFilterTransportType: {
    title?: string;
    data?: definitions["tourSearchResponseFilterTransportTypeData"][];
  };
  tourSearchResponseFilterTransportTypeData: {
    title?: string;
    key?: string;
  };
  tourSearchResponseSortList: {
    title?: string;
    sortBy?: string;
  };
  tourSearchZoneResponse: {
    origin?: definitions["apitoursearchLocation"][];
    destination?: definitions["apitoursearchLocation"][];
  };
  tourTourService: {
    title?: string;
    description?: string;
  };
  tourTripListResponse: {
    list?: definitions["apitourList"][];
  };
  tourTripSuggestionsResponse: {
    categories?: definitions["apitourCategory"][];
  };
  tourVoucherRequest: {
    orderId?: string;
  };
  tourVoucherResponse: {
    url?: string;
  };
}

export interface operations {
  Tour_Contact: {
    parameters: {
      body: {
        body: definitions["tourContactRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourContactResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_CreateOrder: {
    parameters: {
      body: {
        body: definitions["tourCreateOrderRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourCreateOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_ListOrders: {
    parameters: {
      query: {
        /** Filter by order ID (exact match) */
        orderId?: string;
        /** Filter by tour name (contains) */
        tourName?: string;
        /** Filter by user phone number (exact match) */
        userPhoneNumber?: string;
        /** Filter by order status (init, pending, success, failed, refunded) */
        status?: string;
        /** Filter by minimum amount */
        minAmount?: string;
        /** Filter by maximum amount */
        maxAmount?: string;
        /** Sort by amount (asc or desc) */
        sortByAmount?: string;
        /** Page number (starts from 1) */
        page?: number;
        /** Number of items per page */
        pageSize?: number;
        /** Start date for filtering (format: unix timestamp) */
        startDate?: string;
        /** End date for filtering (format: unix timestamp) */
        endDate?: string;
        /** Order origin */
        origin?: string;
        /** Order destination */
        destination?: string;
        /** Agency name */
        agencyName?: string;
        /** User firstname */
        userFirstName?: string;
        /** User lastname */
        userLastName?: string;
        /** Tour type (0 for domestic, 1 for international) */
        isInternational?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourOrderFilterResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_TourList: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_TourContent: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourContentResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_TourPackages: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourPackageListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_VoucherAdmin: {
    parameters: {
      body: {
        body: definitions["tourVoucherRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourVoucherResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_Voucher: {
    parameters: {
      body: {
        body: definitions["tourVoucherRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourVoucherResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_GetCheckout: {
    parameters: {
      path: {
        packageDateID: string;
      };
      query: {
        requestID?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apitourGetCheckoutResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_GetPDP: {
    parameters: {
      path: {
        tripID: string;
      };
      query: {
        packageDateID?: string;
        requestID?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourGetPDPResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_Search: {
    parameters: {
      body: {
        body: definitions["tourSearchRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourSearchResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_TripList: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourTripListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_TripSuggestions: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourTripSuggestionsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_FrequenciesCity: {
    parameters: {
      path: {
        zoneType: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourFrequenciesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Tour_SearchZone: {
    parameters: {
      path: {
        zoneType: string;
        locationType: string;
        cityName: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tourSearchZoneResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
}

export interface external {}
