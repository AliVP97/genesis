/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/trips": {
    get: operations["Trips_GetTrips"];
  };
  "/v2/trips": {
    get: operations["MyTrips_GetTrips"];
  };
  "/v2/trips/{type}/{orderId}": {
    get: operations["MyTrips_GetTripDetails"];
  };
}

export interface definitions {
  apitripsAbout: {
    aboutHotel?: string;
    cancellationRules?: definitions["apitripsCancellationRules"][];
    generalRules?: string;
  };
  /**
   * @default AGE_TYPE_UNDEFINED
   * @enum {string}
   */
  apitripsAgeType:
    | "AGE_TYPE_UNDEFINED"
    | "AGE_TYPE_ADULT"
    | "AGE_TYPE_CHILD"
    | "AGE_TYPE_INFANT";
  apitripsAircraftEntry: {
    aircraft?: definitions["apitripsName"];
    code?: string;
  };
  apitripsAirline: {
    code?: string;
    name?: string;
  };
  apitripsAirlineEntry: {
    logoUri?: string;
    name?: definitions["apitripsName"];
    code?: string;
  };
  apitripsAirport: {
    country?: definitions["apitripsCountry"];
    city?: definitions["apitripsCity"];
    name?: definitions["apitripsName"];
    iata?: string;
  };
  apitripsBaggage: {
    code?: string;
    name?: definitions["apitripsName"];
    /** Format: int32 */
    count?: number;
    /** Format: int32 */
    weight?: number;
  };
  apitripsBaggageInfo: {
    passengerType?: definitions["tripsIntFlightPassengerType"];
    unit?: string;
    /** Format: int32 */
    quantity?: number;
    /** Format: int32 */
    weight?: number;
    description?: string;
  };
  apitripsBookingData: {
    /** Format: int64 */
    bookedAt?: string;
    /** Format: int64 */
    bookValidUntil?: string;
    reference?: string;
    booker?: string;
  };
  apitripsBusInfo: {
    busId?: string;
    companyName?: string;
    companyGroup?: string;
    /** Format: int64 */
    departureDate?: string;
    departureDateString?: string;
    departureDateHourString?: string;
    departureFullDateString?: string;
    originStation?: string;
    originCity?: string;
    destinationStation?: string;
    destinationCity?: string;
    /** Format: int64 */
    remainingSeats?: number;
    /** Format: uint64 */
    price?: string;
    /** Format: uint64 */
    finalPrice?: string;
    /** Format: int64 */
    discount?: number;
    promote?: string;
    finalDestinationCity?: string;
    busType?: definitions["apitripsBusType"];
    logo?: string;
    /** Format: uint64 */
    distance?: string;
    otherDestinations?: string[];
    refundPolicy?: definitions["apitripsRefundPolicy"][];
    busName?: string;
  };
  /**
   * @default VIP
   * @enum {string}
   */
  apitripsBusType: "VIP" | "NORMAL";
  /**
   * @default CABIN_TYPE_UNDEFINED
   * @enum {string}
   */
  apitripsCabinType:
    | "CABIN_TYPE_UNDEFINED"
    | "CABIN_TYPE_ECONOMY"
    | "CABIN_TYPE_PREMIUM"
    | "CABIN_TYPE_BUSINESS"
    | "CABIN_TYPE_FIRST";
  apitripsCancellationRules: {
    penalty?: string;
    text?: string;
  };
  apitripsCheck: {
    checkIn?: string;
    checkOut?: string;
  };
  apitripsCheckDate: {
    checkIn?: string;
    checkInString?: string;
    checkOut?: string;
    checkOutString?: string;
  };
  apitripsCity: {
    name?: definitions["apitripsName"];
    iata?: string;
  };
  /**
   * @default COMPARTMENT_GENDER_UNDEFINED
   * @enum {string}
   */
  apitripsCompartmentGenderType:
    | "COMPARTMENT_GENDER_UNDEFINED"
    | "COMPARTMENT_GENDER_MEN_ONLY"
    | "COMPARTMENT_GENDER_WOMEN_ONLY"
    | "COMPARTMENT_GENDER_FAMILY";
  apitripsContactInfo: {
    phoneNumber?: string;
    email?: string;
  };
  apitripsCountry: {
    twoLetterCode?: string;
    code?: string;
    name?: definitions["apitripsName"];
  };
  apitripsExtraInfo: {
    /** Format: int64 */
    priority?: string;
    isFiltered?: boolean;
    filterReason?: definitions["apitripsFilterReason"];
    /** Format: double */
    discount?: number;
    /** Format: double */
    commission?: number;
    /** Format: double */
    markup?: number;
  };
  apitripsFacility: {
    name?: string;
    icon?: string;
    type?: definitions["apitripsFacilityType"];
  };
  /**
   * @default None
   * @enum {string}
   */
  apitripsFacilityType:
    | "None"
    | "TV"
    | "POOL"
    | "SUIT"
    | "RESTAURANT"
    | "INTERNET"
    | "EN_SERVICE"
    | "IR_SERVICE"
    | "PARKING"
    | "TRANSPORT"
    | "TRANSPORT_WENT"
    | "TRANSPORT_BACK"
    | "PRAY_ROOM"
    | "LABI"
    | "SATELLITE"
    | "SPORT"
    | "SHOP"
    | "CAFE"
    | "INTERNET_IN_LABI"
    | "BILLIARD"
    | "TEL_IN_ROOM"
    | "SAUNA"
    | "REFRIGERATOR"
    | "PET"
    | "SMOKE"
    | "TRANSFER"
    | "DISABLED"
    | "BREAKFAST";
  apitripsFareBreakdown: {
    /** Format: double */
    baseFare?: number;
    /** Format: double */
    totalTax?: number;
    /** Format: double */
    totalPrice?: number;
    taxDetails?: definitions["apitripsTaxDetail"][];
    /** Format: double */
    totalRefundableTaxes?: number;
    passengerType?: definitions["tripsIntFlightPassengerType"];
    /** Format: int32 */
    count?: number;
  };
  apitripsFilterReason: {
    description?: string;
    reason?: definitions["apitripsFilterReasonFilterReasonType"];
  };
  /**
   * @default FILTER_REASON_UNDEFINED
   * @enum {string}
   */
  apitripsFilterReasonFilterReasonType:
    | "FILTER_REASON_UNDEFINED"
    | "FILTER_REASON_CONTRADICTION_DATE";
  /**
   * @default UNDEFINED
   * @enum {string}
   */
  apitripsFlightClass: "UNDEFINED" | "ECONOMY" | "BUSINESS" | "PREMIUM";
  apitripsFlightEndpoint: {
    /** Format: int64 */
    date?: string;
    terminal?: string;
    airport?: definitions["apitripsAirport"];
    dateString?: string;
    dateHourString?: string;
    fullDateString?: string;
  };
  apitripsFlightInfo: {
    isCharter?: boolean;
    airline?: definitions["apitripsAirline"];
    flightClass?: definitions["apitripsFlightClass"];
    departure?: definitions["apitripsFlightEndpoint"];
    arrival?: definitions["apitripsFlightEndpoint"];
    flightID?: string;
    airplaneModel?: string;
    flightNumber?: string;
    fareClass?: string;
    options?: string[];
    allowedBaggage?: definitions["apitripsBaggage"][];
    refundPolicies?: definitions["tripsFlightRefundPolicyItem"][];
  };
  /**
   * @default ORDERSTATUS_UNDEFINED
   * @enum {string}
   */
  apitripsFlightOrderStatus:
    | "ORDERSTATUS_UNDEFINED"
    | "ORDERSTATUS_ORDER_CREATED"
    | "ORDERSTATUS_ORDER_RESERVED"
    | "ORDERSTATUS_CHECKED_OUT"
    | "ORDERSTATUS_PAYMENT_FAILED"
    | "ORDERSTATUS_PAYMENT_SUCCESS"
    | "ORDERSTATUS_BUY_FAILED"
    | "ORDERSTATUS_BUY_PENDING"
    | "ORDERSTATUS_BUY_CONFIRMED"
    | "ORDERSTATUS_CANCELED"
    | "ORDERSTATUS_PARTIALLY_BOUGHT";
  apitripsFlightSegment: {
    origin?: definitions["tripsIntFlightEndpoint"];
    destination?: definitions["tripsIntFlightEndpoint"];
    aircraftCode?: string;
    fareClass?: string;
    cabinTypeDisplay?: string;
    cabinType?: definitions["apitripsCabinType"];
    flightNumber?: string;
    /** Format: int32 */
    stopCount?: number;
    operatingAirlineCode?: string;
    marketingAirlineCode?: string;
    /** Format: int64 */
    duration?: string;
    flightStops?: definitions["apitripsFlightStop"][];
    baggageInfos?: definitions["apitripsBaggageInfo"][];
    /** Format: int64 */
    destinationStopDuration?: string;
  };
  apitripsFlightStop: {
    iata?: string;
    /** Format: int64 */
    duration?: string;
    arrivalAt?: string;
    departureAt?: string;
  };
  /**
   * @default GENDER_TYPE_UNDEFINED
   * @enum {string}
   */
  apitripsGenderType:
    | "GENDER_TYPE_UNDEFINED"
    | "GENDER_TYPE_FEMALE"
    | "GENDER_TYPE_MALE"
    | "Gender_TYPE_RATHER_NOT_SAY";
  apitripsHalfCharge: {
    availability?: boolean;
    /** Format: int64 */
    price?: number;
  };
  apitripsHalfDayPrice: {
    early?: definitions["apitripsHalfCharge"];
    late?: definitions["apitripsHalfCharge"];
    foreigner?: definitions["apitripsHalfCharge"];
  };
  /**
   * @default HOTEL
   * @enum {string}
   */
  apitripsHotelType: "HOTEL";
  apitripsIATAEntry: {
    name?: definitions["apitripsName"];
    city?: definitions["apitripsCity"];
    country?: definitions["tripsIntFlightCountry"];
    code?: string;
  };
  apitripsItinerary: {
    itineraryId?: string;
    currency?: string;
    hideAvailableSeats?: boolean;
    /** Format: int32 */
    availableSeat?: number;
    fareBreakdowns?: definitions["apitripsFareBreakdown"][];
    refundPolicies?: definitions["tripsIntFlightRefundPolicy"][];
    priceInfo?: definitions["apitripsPriceInfo"];
    tripMode?: definitions["apitripsTripMode"];
    leavingFlight?: definitions["tripsIntFlight"];
    returningFlight?: definitions["tripsIntFlight"];
    extraInfo?: definitions["apitripsExtraInfo"];
  };
  apitripsLocation: {
    /** fixme: lowercase */
    point?: definitions["apitripsPoint"];
  };
  apitripsName: {
    farsi?: string;
    english?: string;
  };
  apitripsOptionalService: {
    id?: string;
    name?: string;
    /** Format: uint64 */
    price?: string;
  };
  apitripsOrderPayment: {
    /** Format: uint64 */
    price?: string;
    /** Format: uint64 */
    tax?: string;
    /** Format: uint64 */
    totalPrice?: string;
    /** Format: uint64 */
    discount?: string;
    rrn?: string;
    /** Format: int64 */
    paymentTime?: string;
    /** PaymentType payment_type = 7; */
    mask?: string;
    status?: definitions["apitripsPaymentStatus"];
  };
  /**
   * @default HOTEL_ORDER_STATUS_UNDEFINED
   * @enum {string}
   */
  apitripsOrderStatus:
    | "HOTEL_ORDER_STATUS_UNDEFINED"
    | "HOTEL_ORDER_STATUS_ORDER_ROOM_ADDED"
    | "HOTEL_ORDER_STATUS_ORDER_PASSENGER_ADDED"
    | "HOTEL_ORDER_STATUS_ORDER_RESERVED"
    | "HOTEL_ORDER_STATUS_RESERVATION_EXPIRED"
    | "HOTEL_ORDER_STATUS_ORDER_CONTACT_INFO_ADDED"
    | "HOTEL_ORDER_STATUS_PAYMENT_INITIAL"
    | "HOTEL_ORDER_STATUS_PAYMENT_FAILED"
    | "HOTEL_ORDER_STATUS_BOOK_SUCCESSFUL"
    | "HOTEL_ORDER_STATUS_BOOK_PENDING"
    | "HOTEL_ORDER_STATUS_BOOK_REJECTED"
    | "HOTEL_ORDER_STATUS_BOOK_FAILED"
    | "ORDER_STATUS_PARTIALLY_REFUND"
    | "ORDER_STATUS_FULLY_REFUND";
  apitripsOrderStatusHistoryItem: {
    status?: definitions["tripsIntFlightOrderStatus"];
    /** Format: int64 */
    at?: string;
    reason?: definitions["apitripsOrderStatusHistoryItemOrderChangeReason"];
    description?: string;
  };
  /**
   * @default ORDER_CHANGE_REASON_UNDEFINED
   * @enum {string}
   */
  apitripsOrderStatusHistoryItemOrderChangeReason: "ORDER_CHANGE_REASON_UNDEFINED";
  apitripsPassenger: {
    passengerID?: string;
    nationalCode?: string;
    nationality?: string;
    birthDate?: string;
    lastname?: definitions["apitripsName"];
    firstname?: definitions["apitripsName"];
    passport?: definitions["apitripsPassport"];
    gender?: definitions["apitripsGenderType"];
    passengerType?: definitions["apitripsPassengerType"];
    ageType?: definitions["apitripsAgeType"];
    tickets?: definitions["tripsFlightTicket"][];
  };
  /**
   * @default PASSENGER_TYPE_UNDEFINED
   * @enum {string}
   */
  apitripsPassengerType:
    | "PASSENGER_TYPE_UNDEFINED"
    | "PASSENGER_TYPE_NATIONAL_CARD"
    | "PASSENGER_TYPE_PASSPORT"
    | "PASSENGER_TYPE_BOTH";
  apitripsPassengers: {
    leaderName?: string;
    leaderGender?: definitions["apitripsGenderType"];
    nationalCode?: string[];
    providerContactPhone?: string;
  };
  apitripsPassport: {
    country?: string;
    expireDate?: string;
    issueDate?: string;
    number?: string;
  };
  apitripsPayment: {
    id?: string;
    currentStep?: string;
    payload?: definitions["apitripsPaymentPayload"];
    status?: string;
    /** Format: int64 */
    paymentTime?: string;
    /** Format: int32 */
    version?: number;
    data?: { [key: string]: string };
  };
  apitripsPaymentPayload: {
    orderId?: string;
    userId?: string;
    paymentId?: string;
    /** Format: int64 */
    serviceId?: number;
    /** Format: int64 */
    price?: number;
    rrn?: string;
  };
  /**
   * @default PAYMENT_STATUS_UNDEFINED
   * @enum {string}
   */
  apitripsPaymentStatus:
    | "PAYMENT_STATUS_UNDEFINED"
    | "PAYMENT_STATUS_CREATED"
    | "PAYMENT_STATUS_CANCELED"
    | "PAYMENT_STATUS_REJECTED"
    | "PAYMENT_STATUS_SUCCESSFUL";
  apitripsPoint: {
    /** Format: double */
    lat?: number;
    /** Format: double */
    long?: number;
  };
  apitripsPriceDetail: {
    /** Format: uint64 */
    count?: string;
    tariff?: definitions["apitripsTariff"];
    /** Format: uint64 */
    price?: string;
    /** Format: uint64 */
    totalPrice?: string;
  };
  apitripsPriceInfo: {
    /** Format: double */
    baseFare?: number;
    /** Format: double */
    tax?: number;
    /** Format: double */
    price?: number;
    /** Format: double */
    refundableTax?: number;
  };
  apitripsRInfo: {
    roomType?: definitions["apitripsRType"];
    name?: string;
    /** Format: int64 */
    capacity?: string;
    /** Format: int32 */
    quantity?: number;
    hasBreakfast?: boolean;
    hasExtraBed?: boolean;
    description?: string;
  };
  /**
   * @default SINGLE_ROOM
   * @enum {string}
   */
  apitripsRType:
    | "SINGLE_ROOM"
    | "DOUBLE_ROOM"
    | "SUITE"
    | "FAMILY_ROOM"
    | "ROOM"
    | "APARTMENT"
    | "VILLA";
  apitripsRefund: {
    /** Format: uint64 */
    penaltyPercent?: string;
    /** Format: uint64 */
    refundPenalty?: string;
    /** Format: uint64 */
    refundAmount?: string;
    refundStatus?: definitions["apitripsRefundStatus"];
  };
  apitripsRefundPenalty: {
    /** Format: uint64 */
    refundPercent?: string;
    /** Format: uint64 */
    refundAmount?: string;
    /** Format: uint64 */
    refundPenalty?: string;
  };
  apitripsRefundPolicy: {
    /** Format: uint64 */
    percent?: string;
    text?: string;
  };
  apitripsRefundPolicyItem: {
    Text?: string;
    /** Format: float */
    Percent?: number;
  };
  /**
   * @default REFUND_STATUS_UNDEFINED
   * @enum {string}
   */
  apitripsRefundStatus:
    | "REFUND_STATUS_UNDEFINED"
    | "REFUND_STATUS_REQUESTED"
    | "REFUND_STATUS_FAILED"
    | "REFUND_STATUS_REJECTED"
    | "REFUND_STATUS_SUCCESSFUL";
  apitripsRoom: {
    roomId?: string;
    hotelId?: string;
    roomInfo?: definitions["apitripsRInfo"];
    priceDetail?: definitions["apitripsRoomPrice"];
    roomStatus?: definitions["apitripsRoomStatus"];
    refundable?: boolean;
  };
  apitripsRoomPrice: {
    roomId?: string;
    price?: definitions["tripsHotelPriceDetail"];
    halfCharge?: definitions["apitripsHalfDayPrice"];
    refund?: definitions["apitripsRefundPenalty"];
  };
  apitripsRoomRefund: {
    roomId?: string;
    passengerId?: string;
    status?: definitions["apitripsRoomStatus"];
    /** Format: uint64 */
    refundPercent?: string;
    /** Format: uint64 */
    refundAmount?: string;
    /** Format: uint64 */
    refundPenalty?: string;
  };
  /**
   * @default ROOM_STATUS_UNDEFINED
   * @enum {string}
   */
  apitripsRoomStatus:
    | "ROOM_STATUS_UNDEFINED"
    | "ROOM_STATUS_INITIAL"
    | "ROOM_STATUS_RESERVED"
    | "ROOM_STATUS_FINALIZED"
    | "ROOM_STATUS_REFUND_REQUESTED"
    | "ROOM_STATUS_REFUND_ACCEPTED"
    | "ROOM_STATUS_REFUND_REJECTED"
    | "ROOM_STATUS_REFUND_FAILED";
  apitripsSightLocation: {
    name?: string;
    distance?: string;
    time?: string;
    icon?: string;
    location?: definitions["apitripsLocation"];
  };
  /**
   * @default TARIFF_UNSPECIFIED
   * @enum {string}
   */
  apitripsTariff:
    | "TARIFF_UNSPECIFIED"
    | "TARIFF_ADULT"
    | "TARIFF_CHILD"
    | "TARIFF_EMPTY"
    | "TARIFF_INFANT";
  apitripsTaxDetail: {
    /** Format: double */
    amount?: number;
    taxCode?: string;
    taxName?: string;
    isRefundable?: boolean;
  };
  apitripsTicket: {
    Seat?: string[];
    TicketNumber?: string;
    VerId?: string;
    SaleId?: string;
    TerminalId?: string;
  };
  apitripsTicketPayment: {
    /** Format: uint64 */
    price?: string;
    /** Format: uint64 */
    tax?: string;
    /** Format: uint64 */
    totalPrice?: string;
  };
  apitripsTrainInfo: {
    trainId?: string;
    trainNumber?: string;
    /** Format: int64 */
    departureDate?: string;
    /** Format: int64 */
    arrivalDate?: string;
    hasCompartment?: boolean;
    wagonType?: definitions["apitripsWagonType"];
    /** Format: uint64 */
    fare?: string;
    wagonCode?: string;
    wagonName?: string;
    /** Format: int64 */
    compartmentCapacity?: number;
    /** Format: int64 */
    availableSeatCount?: number;
    logoUrl?: string;
    originName?: string;
    destinationName?: string;
    trainOptions?: definitions["apitripsTrainOption"][];
    refundPolicy?: definitions["tripsTrainRefundPolicyItem"][];
    companyName?: string;
    priceDetail?: definitions["apitripsPriceDetail"][];
    trackingId?: string;
    departureDateString?: string;
    departureDateHourString?: string;
    arrivalDateString?: string;
    arrivalDateHourString?: string;
    departureFullDateString?: string;
    arrivalFullDateString?: string;
  };
  apitripsTrainOption: {
    text?: string;
    code?: string;
    iconUrl?: string;
  };
  apitripsTrainTicket: {
    id?: string;
    ticketStatus?: definitions["tripsTrainTicketStatus"];
    /** Format: uint64 */
    price?: string;
    passenger?: definitions["tripsTrainPassenger"];
    /** Format: int64 */
    issueDate?: string;
    tariff?: definitions["apitripsTariff"];
    seatNumber?: string;
    compartmentNumber?: string;
    wagonNumber?: string;
    option?: definitions["apitripsOptionalService"][];
  };
  apitripsTrainTrip: {
    id?: string;
    trainInfo?: definitions["apitripsTrainInfo"];
    tickets?: definitions["apitripsTrainTicket"][];
    wantCompartment?: boolean;
    compartmentType?: definitions["apitripsCompartmentGenderType"];
  };
  /**
   * @default TRIP_MODE_UNDEFINED
   * @enum {string}
   */
  apitripsTripMode:
    | "TRIP_MODE_UNDEFINED"
    | "TRIP_MODE_ONEWAY"
    | "TRIP_MODE_ROUND_TRIP";
  /**
   * @default Undefined
   * @enum {string}
   */
  apitripsType:
    | "Undefined"
    | "Flight"
    | "Train"
    | "Bus"
    | "International_Flight"
    | "Hotel"
    | "Tour";
  /**
   * @default WAGON_TYPE_UNDEFINED
   * @enum {string}
   */
  apitripsWagonType:
    | "WAGON_TYPE_UNDEFINED"
    | "WAGON_TYPE_COMPARTMENT_4"
    | "WAGON_TYPE_COMPARTMENT_6"
    | "WAGON_TYPE_BUS_4"
    | "WAGON_TYPE_BUS_6";
  /**
   * @description `Any` contains an arbitrary serialized protocol buffer message along with a
   * URL that describes the type of the serialized message.
   *
   * Protobuf library provides support to pack/unpack Any values in the form
   * of utility functions or additional generated methods of the Any type.
   *
   * Example 1: Pack and unpack a message in C++.
   *
   *     Foo foo = ...;
   *     Any any;
   *     any.PackFrom(foo);
   *     ...
   *     if (any.UnpackTo(&foo)) {
   *       ...
   *     }
   *
   * Example 2: Pack and unpack a message in Java.
   *
   *     Foo foo = ...;
   *     Any any = Any.pack(foo);
   *     ...
   *     if (any.is(Foo.class)) {
   *       foo = any.unpack(Foo.class);
   *     }
   *
   *  Example 3: Pack and unpack a message in Python.
   *
   *     foo = Foo(...)
   *     any = Any()
   *     any.Pack(foo)
   *     ...
   *     if any.Is(Foo.DESCRIPTOR):
   *       any.Unpack(foo)
   *       ...
   *
   *  Example 4: Pack and unpack a message in Go
   *
   *      foo := &pb.Foo{...}
   *      any, err := anypb.New(foo)
   *      if err != nil {
   *        ...
   *      }
   *      ...
   *      foo := &pb.Foo{}
   *      if err := any.UnmarshalTo(foo); err != nil {
   *        ...
   *      }
   *
   * The pack methods provided by protobuf library will by default use
   * 'type.googleapis.com/full.type.name' as the type URL and the unpack
   * methods only use the fully qualified type name after the last '/'
   * in the type URL, for example "foo.bar.com/x/y.z" will yield type
   * name "y.z".
   *
   *
   * JSON
   * ====
   * The JSON representation of an `Any` value uses the regular
   * representation of the deserialized, embedded message, with an
   * additional field `@type` which contains the type URL. Example:
   *
   *     package google.profile;
   *     message Person {
   *       string first_name = 1;
   *       string last_name = 2;
   *     }
   *
   *     {
   *       "@type": "type.googleapis.com/google.profile.Person",
   *       "firstName": <string>,
   *       "lastName": <string>
   *     }
   *
   * If the embedded message type is well-known and has a custom JSON
   * representation, that representation will be embedded adding a field
   * `value` which holds the custom JSON in addition to the `@type`
   * field. Example (for message [google.protobuf.Duration][]):
   *
   *     {
   *       "@type": "type.googleapis.com/google.protobuf.Duration",
   *       "value": "1.212s"
   *     }
   */
  protobufAny: {
    /**
     * @description A URL/resource name that uniquely identifies the type of the serialized
     * protocol buffer message. This string must contain at least
     * one "/" character. The last segment of the URL's path must represent
     * the fully qualified name of the type (as in
     * `path/google.protobuf.Duration`). The name should be in a canonical form
     * (e.g., leading "." is not accepted).
     *
     * In practice, teams usually precompile into the binary all types that they
     * expect it to use in the context of Any. However, for URLs which use the
     * scheme `http`, `https`, or no scheme, one can optionally set up a type
     * server that maps type URLs to message definitions as follows:
     *
     * * If no scheme is provided, `https` is assumed.
     * * An HTTP GET on the URL must yield a [google.protobuf.Type][]
     *   value in binary format, or produce an error.
     * * Applications are allowed to cache lookup results based on the
     *   URL, or have them precompiled into a binary to avoid any
     *   lookup. Therefore, binary compatibility needs to be preserved
     *   on changes to types. (Use versioned type names to manage
     *   breaking changes.)
     *
     * Note: this functionality is not currently available in the official
     * protobuf release, and it is not used for type URLs beginning with
     * type.googleapis.com.
     *
     * Schemes other than `http`, `https` (or the empty scheme) might be
     * used with implementation specific semantics.
     */
    "@type"?: string;
  } & { [key: string]: unknown };
  rpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
  tripsBusDetails: {
    orderId?: string;
    orderNumber?: string;
    /** Format: int64 */
    issueDate?: string;
    issueDateString?: string;
    busInfo?: definitions["apitripsBusInfo"];
    orderStatus?: definitions["tripsBusOrderStatus"];
    seats?: number[];
    passengers?: definitions["apitripsPassengers"];
    ticket?: definitions["apitripsTicket"];
    payment?: definitions["apitripsPayment"];
    /** Refund refund =10; */
    userPhone?: string;
    userID?: string;
    internalContactPhone?: string;
    internalEmail?: string;
    /** Format: int64 */
    expireDate?: string;
    /** Format: uint64 */
    totalPrice?: string;
    refund?: definitions["apitripsRefund"];
  };
  /**
   * - BUS_ORDER_STATUS_BUY_FAILED: BUS_ORDER_STATUS_PAYMENT_SUCCESS = 8;
   * @default BUS_ORDER_STATUS_UNDEFINED
   * @enum {string}
   */
  tripsBusOrderStatus:
    | "BUS_ORDER_STATUS_UNDEFINED"
    | "BUS_ORDER_STATUS_ORDER_CREATED"
    | "BUS_ORDER_STATUS_ORDER_SEAT_ADDED"
    | "BUS_ORDER_STATUS_ORDER_PASSENGER_ADDED"
    | "BUS_ORDER_STATUS_ORDER_CONTACT_INFO_ADDED"
    | "BUS_ORDER_STATUS_ORDER_RESERVED"
    | "BUS_ORDER_STATUS_RESERVATION_EXPIRED"
    | "BUS_ORDER_STATUS_PAYMENT_FAILED"
    | "BUS_ORDER_STATUS_BUY_FAILED"
    | "BUS_ORDER_STATUS_BUY_CONFIRMED"
    | "BUS_ORDER_STATUS_REFUND_REQUESTED"
    | "BUS_ORDER_STATUS_REFUND_ACCEPTED"
    | "BUS_ORDER_STATUS_REFUND_REJECTED"
    | "BUS_ORDER_STATUS_REFUND_FAILED";
  tripsFlightDetails: {
    orderId?: string;
    orderNumber?: string;
    /** Format: int64 */
    expireDate?: string;
    expireDateString?: string;
    /** Format: int64 */
    createdDate?: string;
    createdDateString?: string;
    userId?: string;
    userPhone?: string;
    userEmail?: string;
    status?: definitions["apitripsFlightOrderStatus"];
    payment?: definitions["apitripsOrderPayment"];
    /**
     * repeated OrderPassenger passengers = 6;
     *     OrderPassenger orderPassenger = 11;
     */
    passengers?: definitions["apitripsPassenger"][];
  };
  tripsFlightRefundPolicyItem: {
    Text?: string;
    /** Format: float */
    Percent?: number;
  };
  /**
   * @default REFUNDREASON_UNDEFINED
   * @enum {string}
   */
  tripsFlightRefundReason:
    | "REFUNDREASON_UNDEFINED"
    | "REFUNDREASON_FLIGHT_CANCELED"
    | "REFUNDREASON_BY_CRCN"
    | "REFUNDREASON_FLIGHT_DELAYED";
  tripsFlightTicket: {
    payment?: definitions["apitripsTicketPayment"];
    status?: definitions["tripsFlightTicketStatus"];
    ticketId?: string;
    pnr?: string;
    ticketNumber?: string;
    /** Format: int64 */
    issueDate?: string;
    orderNumber?: string;
    flightInfo?: definitions["apitripsFlightInfo"];
    /** Format: uint64 */
    refundAmount?: string;
    /** Format: uint64 */
    refundPenalty?: string;
    refundReason?: definitions["tripsFlightRefundReason"];
  };
  /**
   * @default TICKETSTATUS_UNDEFINED
   * @enum {string}
   */
  tripsFlightTicketStatus:
    | "TICKETSTATUS_UNDEFINED"
    | "TICKETSTATUS_ISSUED"
    | "TICKETSTATUS_REFUND_REQUESTED"
    | "TICKETSTATUS_REFUND_PROCESSING"
    | "TICKETSTATUS_REFUND_CONFIRMED"
    | "TICKETSTATUS_REFUND_REJECTED"
    | "TICKETSTATUS_REFUND_DONE"
    | "TICKETSTATUS_REFUND_FAILED";
  tripsGetTripDetailsResponse: {
    type?: definitions["apitripsType"];
    trainDetails?: definitions["tripsTrainDetails"];
    busDetails?: definitions["tripsBusDetails"];
    flightDetails?: definitions["tripsFlightDetails"];
    intFlightDetails?: definitions["tripsIntFlightDetails"];
    hotelDetail?: definitions["tripsHotelDetail"];
    tourDetail?: definitions["tripsTourDetail"];
  };
  tripsGetTripListResponse: {
    tripList?: definitions["tripsTripsInfo"][];
  };
  tripsGetTripsResponse: {
    trips?: definitions["tripsTrip"][];
  };
  tripsHotelCity: {
    cityId?: string;
    name?: string;
    province?: string;
  };
  tripsHotelDetail: {
    orderId?: string;
    status?: definitions["apitripsOrderStatus"];
    hotelInfo?: definitions["tripsHotelInfo"];
    orderNumber?: string;
    room?: definitions["apitripsRoom"][];
    userId?: string;
    passengers?: definitions["tripsHotelPassengers"][];
    payment?: definitions["tripsHotelPayment"];
    checkDate?: definitions["apitripsCheckDate"];
    refund?: definitions["tripsHotelRefund"];
    refundPolicy?: definitions["apitripsRefundPolicyItem"][];
    internalContactPhone?: string;
    internalEmail?: string;
    /** Format: int64 */
    createdAt?: string;
  };
  tripsHotelInfo: {
    hotelId?: string;
    name?: string;
    /** Format: int32 */
    star?: number;
    phone?: string;
    address?: string;
    location?: definitions["apitripsLocation"];
    sightLocation?: definitions["apitripsSightLocation"][];
    images?: string[];
    facility?: definitions["apitripsFacility"][];
    about?: definitions["apitripsAbout"];
    /** PriceDetail price_detail = 11 ; */
    type?: definitions["apitripsHotelType"];
    checkTime?: definitions["apitripsCheck"];
    city?: definitions["tripsHotelCity"];
  };
  tripsHotelPassengers: {
    id?: string;
    name?: string;
    family?: string;
    nationalId?: string;
    phone?: string;
    roomID?: string;
    isForeigner?: boolean;
    earlyCheckin?: boolean;
    lateCheckout?: boolean;
  };
  tripsHotelPayment: {
    voucher?: string;
    /** Format: int64 */
    totalPrice?: number;
  };
  tripsHotelPriceDetail: {
    /** Format: int64 */
    totalPrice?: number;
    /** Format: int64 */
    priceAfterDiscount?: number;
    /** Format: int64 */
    discountPercent?: string;
  };
  tripsHotelRefund: {
    roomRefund?: definitions["apitripsRoomRefund"][];
    /** Format: uint64 */
    totalRefundAmount?: string;
    /** Format: uint64 */
    totalRefundPenalty?: string;
  };
  tripsIntFlight: {
    flightId?: string;
    origin?: definitions["tripsIntFlightEndpoint"];
    destination?: definitions["tripsIntFlightEndpoint"];
    isCharter?: boolean;
    isReserveRequired?: boolean;
    isRefundable?: boolean;
    /** Format: int32 */
    stopCount?: number;
    /** Format: int64 */
    duration?: string;
    priceInfo?: definitions["apitripsPriceInfo"];
    segments?: definitions["apitripsFlightSegment"][];
    fareBreakdowns?: definitions["apitripsFareBreakdown"][];
    cabinType?: definitions["apitripsCabinType"];
    hasMixedCabinTypes?: boolean;
  };
  tripsIntFlightCountry: {
    name?: definitions["apitripsName"];
    /** ISO3166-1 alpha-2 */
    code?: string;
  };
  tripsIntFlightDetails: {
    orderId?: string;
    orderNumber?: string;
    /** Format: int64 */
    createdAt?: string;
    userId?: string;
    passengers?: definitions["tripsIntFlightPassenger"][];
    itinerary?: definitions["apitripsItinerary"];
    tickets?: definitions["tripsIntFlightTicket"][];
    bookingData?: definitions["apitripsBookingData"];
    status?: definitions["apitripsOrderStatusHistoryItem"];
    iataDictionary?: { [key: string]: definitions["apitripsIATAEntry"] };
    aircraftDictionary?: {
      [key: string]: definitions["apitripsAircraftEntry"];
    };
    airlineDictionary?: { [key: string]: definitions["apitripsAirlineEntry"] };
  };
  tripsIntFlightEndpoint: {
    iata?: string;
    terminal?: string;
    /** Local datetime */
    datetime?: string;
    name?: string;
  };
  /**
   * @default INTFLIGHT_ORDER_STATUS_UNDEFINED
   * @enum {string}
   */
  tripsIntFlightOrderStatus:
    | "INTFLIGHT_ORDER_STATUS_UNDEFINED"
    | "INTFLIGHT_ORDER_STATUS_CREATED"
    | "INTFLIGHT_ORDER_STATUS_PASSENGER_ADDED"
    | "INTFLIGHT_ORDER_STATUS_BOOKED"
    | "INTFLIGHT_ORDER_STATUS_BOOK_CANCELED"
    | "INTFLIGHT_ORDER_STATUS_PAYMENT_FAILED"
    | "INTFLIGHT_ORDER_STATUS_PAYMENT_SUCCEESS"
    | "INTFLIGHT_ORDER_STATUS_ISSUE_FAILED"
    | "INTFLIGHT_ORDER_STATUS_ISSUE_PENDING"
    | "INTFLIGHT_ORDER_STATUS_ISSUE_SUCCESS";
  tripsIntFlightPassenger: {
    passengerId?: string;
    passengerType?: definitions["tripsIntFlightPassengerType"];
    gender?: definitions["tripsIntFlightPassengerGender"];
    firstName?: definitions["apitripsName"];
    lastName?: definitions["apitripsName"];
    /** YYYY-MM-DD ISO8601 */
    birthDate?: string;
    contactInfo?: definitions["apitripsContactInfo"];
    /** ISO3361 */
    nationality?: string;
    nationalCode?: string;
    passport?: definitions["tripsIntFlightPassport"];
  };
  /**
   * @default GENDER_UNDEFINED
   * @enum {string}
   */
  tripsIntFlightPassengerGender:
    | "GENDER_UNDEFINED"
    | "GENDER_MALE"
    | "GENDER_FEMALE"
    | "GENDER_UNDISCLOSED";
  /**
   * @default INTFLIGHT_PASSENGER_TYPE_UNDEFINED
   * @enum {string}
   */
  tripsIntFlightPassengerType:
    | "INTFLIGHT_PASSENGER_TYPE_UNDEFINED"
    | "INTFLIGHT_PASSENGER_TYPE_ADULT"
    | "INTFLIGHT_PASSENGER_TYPE_CHILD"
    | "INTFLIGHT_PASSENGER_TYPE_INFANT";
  tripsIntFlightPassport: {
    number?: string;
    /** YYYY-MM-DD ISO8601 */
    expireDate?: string;
    /** ISO3361 */
    issueCountryCode?: string;
  };
  tripsIntFlightRefundInfo: {
    /** Format: double */
    refundedAmount?: number;
    /** Format: double */
    refundPenalty?: number;
    /** Format: int64 */
    refundedAt?: string;
    refundStatus?: definitions["tripsIntFlightRefundStatus"];
  };
  tripsIntFlightRefundPolicy: {
    title?: string;
    description?: string;
    isHtml?: boolean;
  };
  /**
   * @default INTFLIGHT_REFUND_STATUS_UNDEFINED
   * @enum {string}
   */
  tripsIntFlightRefundStatus:
    | "INTFLIGHT_REFUND_STATUS_UNDEFINED"
    | "INTFLIGHT_REFUND_STATUS_PENDING"
    | "INTFLIGHT_REFUND_STATUS_RECEIVED"
    | "INTFLIGHT_REFUND_STATUS_REFUNDED"
    | "INTFLIGHT_REFUND_STATUS_REJECTED"
    | "INTFLIGHT_REFUND_STATUS_DUPLICATE_REQUEST"
    | "INTFLIGHT_REFUND_STATUS_CALCULATED";
  tripsIntFlightTicket: {
    ticketId?: string;
    ticketNumber?: string;
    flightId?: string;
    segmentId?: string;
    passengerId?: string;
    refundInfo?: definitions["tripsIntFlightRefundInfo"];
    status?: definitions["tripsIntFlightTicketStatus"];
    priceInfo?: definitions["apitripsPriceInfo"];
    type?: definitions["tripsIntFlightTicketType"];
  };
  /**
   * @default INTFLIGHT_TICKET_STATUS_UNDEFINED
   * @enum {string}
   */
  tripsIntFlightTicketStatus:
    | "INTFLIGHT_TICKET_STATUS_UNDEFINED"
    | "INTFLIGHT_TICKET_STATUS_ISSUED"
    | "INTFLIGHT_TICKET_STATUS_REFUNDED_REQUEST_RECEIVED"
    | "INTFLIGHT_TICKET_STATUS_REFUNDED"
    | "INTFLIGHT_TICKET_STATUS_REFUNDED_REJECTED";
  /**
   * @default INTFLIGHT_TICKET_TYPE_LEAVE
   * @enum {string}
   */
  tripsIntFlightTicketType:
    | "INTFLIGHT_TICKET_TYPE_LEAVE"
    | "INTFLIGHT_TICKET_TYPE_RETURN";
  /**
   * @description RoundTripMode indicates that a trip is round trip or not.
   * for forward compatibility, define enum (not boolean).
   * @default ROUND_TRIP_MODE_UNSPECIFIED
   * @enum {string}
   */
  tripsRoundTripMode:
    | "ROUND_TRIP_MODE_UNSPECIFIED"
    | "ROUND_TRIP_MODE_ONE_WAY"
    | "ROUND_TRIP_MODE_TWO_WAY";
  tripsTourDetail: {
    orderId?: string;
    rrn?: string;
    passenger?: definitions["tripsTourPassenger"];
    /** Format: int64 */
    price?: string;
    tourName?: string;
    travelType?: string;
    cityName?: string;
    fromDate?: string;
    toDate?: string;
    hotelName?: string;
    /** Format: int64 */
    createdAt?: string;
    supportNumber?: string;
  };
  tripsTourPassenger: {
    firstName?: string;
    lastName?: string;
    nationalCode?: string;
    passportNumber?: string;
    /** Format: int64 */
    passportExpireDate?: string;
  };
  tripsTrainDetails: {
    orderId?: string;
    orderNumber?: string;
    status?: definitions["tripsTrainOrderStatus"];
    /** Format: int64 */
    reserveExpireDate?: string;
    reserveExpireDateString?: string;
    userId?: string;
    /** Format: int64 */
    createdAt?: string;
    createdAtString?: string;
    /** Format: uint64 */
    price?: string;
    trips?: definitions["apitripsTrainTrip"][];
  };
  /**
   * @default ORDER_STATUS_UNDEFINED
   * @enum {string}
   */
  tripsTrainOrderStatus:
    | "ORDER_STATUS_UNDEFINED"
    | "ORDER_STATUS_ORDER_CREATED"
    | "ORDER_STATUS_ORDER_PASSENGERED"
    | "ORDER_STATUS_ORDER_RESERVED"
    | "ORDER_STATUS_RESERVATION_EXPIRED"
    | "ORDER_STATUS_PAYMENT_SUCCESS"
    | "ORDER_STATUS_BUY_FAILED"
    | "ORDER_STATUS_BUY_PENDING"
    | "ORDER_STATUS_BUY_CONFIRMED";
  tripsTrainPassenger: {
    firstName?: string;
    lastName?: string;
    nationalCode?: string;
    /** Format: int64 */
    birthDate?: string;
    genderType?: definitions["apitripsGenderType"];
  };
  tripsTrainRefundPolicyItem: {
    text?: string;
    /** Format: int64 */
    percent?: number;
  };
  /**
   * @default TICKET_STATUS_UNDEFINED
   * @enum {string}
   */
  tripsTrainTicketStatus:
    | "TICKET_STATUS_UNDEFINED"
    | "TICKET_STATUS_INITED"
    | "TICKET_STATUS_ISSUED";
  tripsTrip: {
    data?: definitions["protobufAny"];
    type?: definitions["tripsTripType"];
  };
  /**
   * @default TRIPTYPE_UNDEFINED
   * @enum {string}
   */
  tripsTripType:
    | "TRIPTYPE_UNDEFINED"
    | "TRIPTYPE_DOMESTIC_FLIGHT"
    | "TRIPTYPE_TRAIN";
  tripsTripsInfo: {
    orderNumber?: string;
    /** Format: int64 */
    orderTime?: string;
    orderTimeString?: string;
    /** Format: int64 */
    price?: string;
    type?: definitions["apitripsType"];
    title?: string;
    orderId?: string;
    source?: string;
    destination?: string;
    roundTripMode?: definitions["tripsRoundTripMode"];
  };
}

export interface operations {
  Trips_GetTrips: {
    parameters: {
      query: {
        train?: boolean;
        domesticflight?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tripsGetTripsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MyTrips_GetTrips: {
    parameters: {
      query: {
        tripType?:
          | "Undefined"
          | "Flight"
          | "Train"
          | "Bus"
          | "International_Flight"
          | "Hotel"
          | "Tour";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tripsGetTripListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  MyTrips_GetTripDetails: {
    parameters: {
      path: {
        type:
          | "Undefined"
          | "Flight"
          | "Train"
          | "Bus"
          | "International_Flight"
          | "Hotel"
          | "Tour";
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["tripsGetTripDetailsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
}

export interface external {}
