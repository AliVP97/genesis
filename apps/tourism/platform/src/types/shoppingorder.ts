/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/admin/airline": {
    get: operations["AdminOrder_AirLineNames"];
  };
  "/v1/admin/excel/orders": {
    get: operations["AdminOrder_GetOrdersExcelRequest"];
  };
  "/v1/admin/excel/refund_requests": {
    get: operations["RefundRequest_GetRPExcelRequest"];
  };
  "/v1/admin/flightChange": {
    post: operations["AdminFlightChange_AddFlightChange"];
  };
  "/v1/admin/flightChangeInfo": {
    get: operations["AdminFlightChange_GetFlightChangeInfo"];
  };
  "/v1/admin/flightChanges": {
    get: operations["AdminFlightChange_GetFlightChanges"];
  };
  "/v1/admin/orders": {
    get: operations["AdminOrder_GetOrders"];
  };
  "/v1/admin/orders/{orderId}": {
    get: operations["AdminOrder_GetOrder"];
  };
  "/v1/admin/orders/{orderId}/calculate-refund": {
    post: operations["AdminOrder_CalculateRefund"];
  };
  "/v1/admin/orders/{orderId}/flight/{flightId}/refundreasons": {
    get: operations["AdminOrder_GetRefundReasons"];
  };
  "/v1/admin/orders/{orderId}/manual-buy": {
    post: operations["AdminOrder_ManualBuy"];
  };
  "/v1/admin/orders/{orderId}/pdf": {
    get: operations["AdminOrder_GetTicketPDF"];
  };
  "/v1/admin/payments": {
    get: operations["AdminOrder_GetPaymentByOrderID"];
  };
  "/v1/admin/refund_requests": {
    get: operations["RefundRequest_GetRRList"];
    post: operations["RefundRequest_NewRRAdmin"];
  };
  "/v1/admin/refund_requests/{id}/actions": {
    get: operations["RefundRequest_RRGetActions"];
  };
  "/v1/admin/refund_requests/{id}/comments": {
    get: operations["RefundRequest_GetRRComments"];
  };
  "/v1/admin/refund_requests/{id}/do": {
    post: operations["RefundRequest_RRSendAction"];
  };
  "/v1/admin/refund_requests/{rrId}/comments": {
    post: operations["RefundRequest_NewComment"];
  };
  "/v1/admin/tickets": {
    get: operations["AdminOrder_GetTickets"];
  };
  "/v1/admin/tickets/{ticketId}": {
    patch: operations["AdminOrder_UpdateTicketStatus"];
  };
  "/v1/orders": {
    get: operations["Order_GetOrders"];
    post: operations["Order_CreateOrder"];
  };
  "/v1/orders/{orderId}": {
    get: operations["Order_GetOrder"];
  };
  "/v1/orders/{orderId}/addpassengers": {
    post: operations["Order_AddPassengers"];
  };
  "/v1/orders/{orderId}/calculate-refund": {
    post: operations["Order_CalculateRefund"];
  };
  "/v1/orders/{orderId}/cancel": {
    post: operations["Order_CancelOrder"];
  };
  "/v1/orders/{orderId}/contactinfo": {
    post: operations["Order_UpdateContactInfo"];
  };
  "/v1/orders/{orderId}/discount": {
    post: operations["Order_ApplyDiscount"];
    delete: operations["Order_DiscardDiscount"];
  };
  "/v1/orders/{orderId}/flight/{flightId}/refundreasons": {
    get: operations["Order_GetRefundReasons"];
  };
  "/v1/orders/{orderId}/payment": {
    get: operations["Order_GetOrderPaymentInfo"];
  };
  "/v1/orders/{orderId}/pdf": {
    get: operations["Order_GetTicketPDF"];
  };
  "/v1/orders/{orderId}/refund": {
    post: operations["Order_Refund"];
  };
  "/v1/orders/{orderId}/reserve": {
    post: operations["Order_ReserveOrder"];
  };
  "/v1/orders2": {
    post: operations["Order_CreateOrder2"];
  };
  "/v1/packages/zero-refund/{orderId}": {
    get: operations["Packages_GetZeroRefund"];
    post: operations["Packages_ApplyZeroRefund"];
  };
  "/v2/orders/{orderId}/get-payment": {
    get: operations["Order_GetPaymentInfo"];
  };
  "/v2/orders/{orderId}/payment/{acceptPriceChange}": {
    get: operations["Order_GetOrderPaymentInfo2"];
  };
  "/v2/orders/{orderId}/reserve/{acceptPriceChange}": {
    post: operations["Order_ReserveOrder2"];
  };
}

export interface definitions {
  AdminOrderManualBuyBody: {
    ticketData?: definitions["apishoppingorderAdminManualBuyRequestTicketData"][];
  };
  AdminOrderUpdateTicketStatusBody: {
    status?: definitions["apishoppingorderTicketStatus"];
  };
  OrderAddPassengersBody: {
    passengerIds?: string[];
  };
  OrderApplyDiscountBody: {
    discountCode?: string;
  };
  OrderCancelOrderBody: { [key: string]: unknown };
  OrderReserveOrder2Body: { [key: string]: unknown };
  OrderReserveOrderBody: { [key: string]: unknown };
  OrderUpdateContactInfoBody: {
    phoneNumber?: string;
    email?: string;
  };
  PackagesApplyZeroRefundBody: {
    flightIds?: string[];
  };
  RefundRequestNewCommentBody: {
    body?: string;
  };
  RefundRequestRRSendActionBody: {
    action?: string;
  };
  apishoppingorderAdminGetOrdersResponse: {
    orders?: definitions["apishoppingorderGetOrderResponse"][];
    /** Format: int32 */
    pages?: number;
  };
  apishoppingorderAdminGetTicketsResponse: {
    tickets?: definitions["apishoppingorderTicket"][];
    /** Format: int32 */
    pages?: number;
  };
  apishoppingorderAdminManualBuyRequestTicketData: {
    ticketId?: string;
    ticketNumber?: string;
  };
  /**
   * @default AGE_TYPE_UNDEFINED
   * @enum {string}
   */
  apishoppingorderAgeType:
    | "AGE_TYPE_UNDEFINED"
    | "AGE_TYPE_ADULT"
    | "AGE_TYPE_CHILD"
    | "AGE_TYPE_INFANT";
  apishoppingorderAirLineList: {
    airLines?: definitions["apishoppingorderAirLineName"][];
  };
  apishoppingorderAirLineName: {
    englishName?: string;
    persianName?: string;
    airlineCode?: string;
  };
  apishoppingorderAirline: {
    code?: string;
    name?: string;
  };
  apishoppingorderAirport: {
    country?: definitions["apishoppingorderCountry"];
    city?: definitions["apishoppingorderCity"];
    name?: definitions["apishoppingorderName"];
    iata?: string;
  };
  apishoppingorderBaggage: {
    code?: string;
    name?: definitions["apishoppingorderName"];
    /** Format: int32 */
    count?: number;
    /** Format: int32 */
    weight?: number;
    /** Format: int32 */
    adultAndChildWeight?: number;
    /** Format: int32 */
    infantWeight?: number;
  };
  apishoppingorderCity: {
    name?: definitions["apishoppingorderName"];
    iata?: string;
  };
  apishoppingorderCountry: {
    twoLetterCode?: string;
    code?: string;
    name?: definitions["apishoppingorderName"];
  };
  apishoppingorderCreateOrder2Request: {
    flightIds?: string[];
    flightSource?: definitions["apishoppingorderFlightSource"][];
  };
  apishoppingorderCreateOrderRequest: {
    flightIds?: string[];
    passengers?: definitions["apishoppingorderPassenger"][];
  };
  apishoppingorderCreateOrderResponse: {
    orderId?: string;
    /** Format: int64 */
    expireDate?: string;
  };
  apishoppingorderDateQuery: {
    /** Format: int64 */
    fromDate?: string;
    /** Format: int64 */
    tillDate?: string;
  };
  apishoppingorderFare: {
    /** Format: uint64 */
    adult?: string;
    /** Format: uint64 */
    child?: string;
    /** Format: uint64 */
    infant?: string;
    title?: string;
  };
  /**
   * @default UNDEFINED
   * @enum {string}
   */
  apishoppingorderFlightClass: "UNDEFINED" | "ECONOMY" | "BUSINESS" | "PREMIUM";
  apishoppingorderFlightEndpoint: {
    /** Format: int64 */
    date?: string;
    fullDateString?: string;
    dateString?: string;
    dateHourString?: string;
    terminal?: string;
    airport?: definitions["apishoppingorderAirport"];
  };
  apishoppingorderFlightInfo: {
    isCharter?: boolean;
    airline?: definitions["apishoppingorderAirline"];
    flightClass?: definitions["apishoppingorderFlightClass"];
    departure?: definitions["apishoppingorderFlightEndpoint"];
    arrival?: definitions["apishoppingorderFlightEndpoint"];
    flightID?: string;
    airplaneModel?: string;
    flightNumber?: string;
    fareClass?: string;
    options?: string[];
    allowedBaggage?: definitions["apishoppingorderBaggage"][];
    refundPolicies?: definitions["apishoppingorderRefundPolicyItem"][];
    agencyName?: string;
    /** Format: int32 */
    remainingSeats?: number;
    /** Format: int64 */
    price?: string;
    fare?: definitions["apishoppingorderFare"];
  };
  /**
   * @default FLIGHT_SOURCE_UNDEFINED
   * @enum {string}
   */
  apishoppingorderFlightSource:
    | "FLIGHT_SOURCE_UNDEFINED"
    | "FLIGHT_SOURCE_FLIGHT_LIST"
    | "FLIGHT_SOURCE_SUGGESTION_NEAREST"
    | "FLIGHT_SOURCE_SUGGESTION_LOWEST_PRICE";
  /**
   * @default FLIGHT_TYPE_UNDEFINED
   * @enum {string}
   */
  apishoppingorderFlightType:
    | "FLIGHT_TYPE_UNDEFINED"
    | "FLIGHT_TYPE_CHARTER"
    | "FLIGHT_TYPE_SYSTEMIC";
  /**
   * @default GENDER_TYPE_UNDEFINED
   * @enum {string}
   */
  apishoppingorderGenderType:
    | "GENDER_TYPE_UNDEFINED"
    | "GENDER_TYPE_FEMALE"
    | "GENDER_TYPE_MALE"
    | "Gender_TYPE_RATHER_NOT_SAY";
  apishoppingorderGetOrderPaymentInfoResponse: {
    paymentId?: string;
    /** Format: int64 */
    serviceCode?: string;
    provider?: string;
    /** Format: int64 */
    price?: string;
  };
  apishoppingorderGetOrderResponse: {
    orderId?: string;
    orderNumber?: string;
    /** Format: int64 */
    expireDate?: string;
    expireDateString?: string;
    /** Format: int64 */
    createdDate?: string;
    createdDateString?: string;
    userId?: string;
    userPhone?: string;
    userEmail?: string;
    status?: definitions["apishoppingorderOrderStatus"];
    payment?: definitions["apishoppingorderOrderPayment"];
    passengers?: definitions["apishoppingorderOrderPassenger"][];
    legs?: definitions["apishoppingorderLeg"][];
  };
  apishoppingorderGetOrdersResponse: {
    orders?: definitions["apishoppingorderGetOrderResponse"][];
  };
  apishoppingorderGetRRCommentsResponse: {
    comments?: definitions["apishoppingorderRRComment"][];
  };
  apishoppingorderGetRRListResponse: {
    refundRequests?: definitions["apishoppingorderRefundRequest"][];
    /** Format: int32 */
    pages?: number;
  };
  apishoppingorderGetRefundReasonsResponse: {
    refundReasonItems?: definitions["apishoppingorderRefundReasonItem"][];
  };
  apishoppingorderGetTicketPDFResponse: {
    url?: string;
  };
  apishoppingorderLeg: {
    FlightInfo?: definitions["apishoppingorderFlightInfo"];
    Passengers?: definitions["apishoppingorderPassenger"][];
    Tickets?: definitions["apishoppingorderTicket"][];
    providerName?: string;
  };
  apishoppingorderName: {
    farsi?: string;
    english?: string;
  };
  apishoppingorderOrderPassenger: {
    passenger?: definitions["apishoppingorderPassenger"];
    tickets?: definitions["apishoppingorderTicket"][];
  };
  apishoppingorderOrderPayment: {
    /** Format: uint64 */
    price?: string;
    /** Format: uint64 */
    tax?: string;
    /** Format: uint64 */
    totalPrice?: string;
    /** Format: uint64 */
    discount?: string;
    rrn?: string;
    /** Format: int64 */
    paymentTime?: string;
    gatewayName?: string;
    mask?: string;
    status?: definitions["apishoppingorderPaymentStatus"];
    discountCode?: string;
    /** Format: uint64 */
    packageZeroRefundAmount?: string;
  };
  /**
   * @default ORDERSTATUS_UNDEFINED
   * @enum {string}
   */
  apishoppingorderOrderStatus:
    | "ORDERSTATUS_UNDEFINED"
    | "ORDERSTATUS_ORDER_CREATED"
    | "ORDERSTATUS_ORDER_RESERVED"
    | "ORDERSTATUS_CHECKED_OUT"
    | "ORDERSTATUS_PAYMENT_FAILED"
    | "ORDERSTATUS_PAYMENT_SUCCESS"
    | "ORDERSTATUS_BUY_FAILED"
    | "ORDERSTATUS_BUY_PENDING"
    | "ORDERSTATUS_BUY_CONFIRMED"
    | "ORDERSTATUS_CANCELED"
    | "ORDERSTATUS_PARTIALLY_BOUGHT"
    | "ORDERSTATUS_PASSENGER_ADDED";
  apishoppingorderPassenger: {
    passengerID?: string;
    nationalCode?: string;
    nationality?: string;
    birthDate?: string;
    lastname?: definitions["apishoppingorderName"];
    firstname?: definitions["apishoppingorderName"];
    passport?: definitions["apishoppingorderPassport"];
    gender?: definitions["apishoppingorderGenderType"];
    passengerType?: definitions["apishoppingorderPassengerType"];
    ageType?: definitions["apishoppingorderAgeType"];
  };
  /**
   * @default PASSENGER_TYPE_UNDEFINED
   * @enum {string}
   */
  apishoppingorderPassengerType:
    | "PASSENGER_TYPE_UNDEFINED"
    | "PASSENGER_TYPE_NATIONAL_CARD"
    | "PASSENGER_TYPE_PASSPORT"
    | "PASSENGER_TYPE_BOTH";
  apishoppingorderPassport: {
    country?: string;
    expireDate?: string;
    issueDate?: string;
    number?: string;
  };
  apishoppingorderPaymentInfo: {
    id?: string;
    rrn?: string;
    paymentId?: string;
    mask?: string;
    paymentStatus?: definitions["apishoppingorderPaymentStatus"];
    /** Format: int64 */
    lastModifiedTime?: string;
  };
  apishoppingorderPaymentInfoResponse: {
    paymentInfos?: definitions["apishoppingorderPaymentInfo"][];
  };
  /**
   * @default PAYMENT_STATUS_UNDEFINED
   * @enum {string}
   */
  apishoppingorderPaymentStatus:
    | "PAYMENT_STATUS_UNDEFINED"
    | "PAYMENT_STATUS_CREATED"
    | "PAYMENT_STATUS_CANCELED"
    | "PAYMENT_STATUS_REJECTED"
    | "PAYMENT_STATUS_SUCCESSFUL";
  apishoppingorderRRAction: {
    farsi?: string;
    action?: string;
  };
  apishoppingorderRRComment: {
    authorId?: string;
    authorName?: string;
    body?: string;
    /** Format: int64 */
    createdAt?: string;
    rrId?: string;
  };
  apishoppingorderRRGetActionsResponse: {
    actions?: definitions["apishoppingorderRRAction"][];
  };
  apishoppingorderRRRequest: {
    orderId?: string;
    ticketIds?: string[];
    refundReason?: definitions["apishoppingorderRefundReason"];
  };
  apishoppingorderRRStatus: {
    farsi?: string;
  };
  apishoppingorderRefundPolicyItem: {
    Text?: string;
    /** Format: float */
    Percent?: number;
  };
  /**
   * @default REFUNDREASON_UNDEFINED
   * @enum {string}
   */
  apishoppingorderRefundReason:
    | "REFUNDREASON_UNDEFINED"
    | "REFUNDREASON_FLIGHT_CANCELED"
    | "REFUNDREASON_BY_CRCN"
    | "REFUNDREASON_FLIGHT_DELAYED";
  apishoppingorderRefundReasonItem: {
    successText?: string;
    online?: boolean;
    title?: string;
    refundReason?: definitions["apishoppingorderRefundReason"];
  };
  apishoppingorderRefundRequest: {
    id?: string;
    orderNumber?: string;
    /** Format: int64 */
    creationDate?: string;
    flightInfo?: definitions["apishoppingorderFlightInfo"];
    provider?: string;
    pnr?: string;
    status?: definitions["apishoppingorderRRStatus"];
    refundReason?: definitions["apishoppingorderRefundReason"];
    phoneNumber?: string;
    ticket?: definitions["apishoppingorderTicket"][];
    passengers?: definitions["apishoppingorderPassenger"][];
  };
  /**
   * @default REFUND_REQUEST_TAB_ALL
   * @enum {string}
   */
  apishoppingorderRefundRequestTab:
    | "REFUND_REQUEST_TAB_ALL"
    | "REFUND_REQUEST_TAB_NEW"
    | "REFUND_REQUEST_TAB_REQUESTED"
    | "REFUND_REQUEST_TAB_PENDING"
    | "REFUND_REQUEST_TAB_REJECTED"
    | "REFUND_REQUEST_TAB_REFUNDED"
    | "REFUND_REQUEST_TAB_PAYEDBACK";
  apishoppingorderRefundResponse: {
    ticketsRefundInfo?: definitions["apishoppingorderTicketRefundInfo"][];
    /** Format: int64 */
    elapsedTime?: string;
  };
  apishoppingorderReserveResponse: {
    orderId?: string;
    /** Format: int64 */
    expireDate?: string;
    priceChange?: boolean;
    price?: definitions["apishoppingorderTicketPayment"];
    extraInfo?: { [key: string]: string };
  };
  apishoppingorderTicket: {
    payment?: definitions["apishoppingorderTicketPayment"];
    status?: definitions["apishoppingorderTicketStatus"];
    ticketId?: string;
    pnr?: string;
    ticketNumber?: string;
    /** Format: int64 */
    issueDate?: string;
    issueDateString?: string;
    orderNumber?: string;
    flightInfo?: definitions["apishoppingorderFlightInfo"];
    /** Format: uint64 */
    refundAmount?: string;
    /** Format: uint64 */
    refundPenalty?: string;
    refundReason?: definitions["apishoppingorderRefundReason"];
  };
  apishoppingorderTicketPayment: {
    /** Format: uint64 */
    price?: string;
    /** Format: uint64 */
    tax?: string;
    /** Format: uint64 */
    totalPrice?: string;
    /** Format: uint64 */
    discount?: string;
    /** Format: uint64 */
    packageZeroRefundAmount?: string;
  };
  apishoppingorderTicketRefundInfo: {
    ticketId?: string;
    ticketNumber?: string;
    canRefund?: boolean;
    isRefunded?: boolean;
    /** Format: uint64 */
    refundAmount?: string;
    /** Format: uint64 */
    refundPenalty?: string;
    ticketStatus?: definitions["apishoppingorderTicketStatus"];
  };
  /**
   * @default TICKETSTATUS_UNDEFINED
   * @enum {string}
   */
  apishoppingorderTicketStatus:
    | "TICKETSTATUS_UNDEFINED"
    | "TICKETSTATUS_ISSUED"
    | "TICKETSTATUS_REFUND_REQUESTED"
    | "TICKETSTATUS_REFUND_PROCESSING"
    | "TICKETSTATUS_REFUND_CONFIRMED"
    | "TICKETSTATUS_REFUND_REJECTED"
    | "TICKETSTATUS_REFUND_DONE"
    | "TICKETSTATUS_REFUND_FAILED";
  flightAdminOrderCalculateRefundBody: {
    ticketIds?: string[];
    refundReason?: definitions["apishoppingorderRefundReason"];
  };
  flightOrderCalculateRefundBody: {
    ticketIds?: string[];
    refundReason?: definitions["apishoppingorderRefundReason"];
  };
  flightOrderRefundBody: {
    ticketIds?: string[];
    refundReason?: definitions["apishoppingorderRefundReason"];
  };
  protobufAny: {
    "@type"?: string;
  } & { [key: string]: unknown };
  rpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
  shoppingorderAdminDownloadExcelResponse: {
    downloadLink?: string;
  };
  shoppingorderAdminRefundResponse: {
    ticketsRefundInfo?: definitions["shoppingorderAdminTicketRefundInfo"][];
    /** Format: int64 */
    elapsedTime?: string;
  };
  shoppingorderAdminTicketRefundInfo: {
    ticketId?: string;
    ticketNumber?: string;
    canRefund?: boolean;
    isRefunded?: boolean;
    /** Format: uint64 */
    refundAmount?: string;
    /** Format: uint64 */
    refundPenalty?: string;
    ticketStatus?: definitions["apishoppingorderTicketStatus"];
    /** Format: uint64 */
    ticketPrice?: string;
    passengerName?: string;
  };
  shoppingorderApplyDiscountResponse: {
    applied?: boolean;
    reason?: string;
    discountCode?: string;
    /** Format: uint64 */
    payAmount?: string;
  };
  shoppingorderFlightChange: {
    flightNumber?: string;
    /** string time format yyyy/mm/dd - hh:mm */
    oldStringDepartureDate?: string;
    /** string time format yyyy/mm/dd - hh:mm */
    newStringDepartureDate?: string;
    Airline?: string;
    flightChangeStatus?: definitions["shoppingorderFlightChangeStatus"];
    notificationStatus?: definitions["shoppingorderNotificationStatus"];
    /**
     * timestamp - additional data
     * Format: int64
     */
    creationTime?: string;
    origin?: string;
    destination?: string;
  };
  shoppingorderFlightChangeInfResponse: {
    origin?: string;
    destination?: string;
    Airline?: string;
    stringTime?: string;
    /**
     * timestamp
     * Format: int64
     */
    departureDate?: string;
  };
  shoppingorderFlightChangeRequest: {
    flightNumber?: string;
    /**
     * timestamp
     * Format: int64
     */
    oldDepartureDate?: string;
    flightChangeStatus?: definitions["shoppingorderFlightChangeStatus"];
    /** Format: int64 */
    newDepartureDate?: string;
    providerId?: string;
    airlineCode?: string;
    pnrs?: string[];
    newFlightNumber?: string;
    applyToAll?: boolean;
  };
  /**
   * @default FLIGHT_STATUS_UNDEFINED
   * @enum {string}
   */
  shoppingorderFlightChangeStatus:
    | "FLIGHT_STATUS_UNDEFINED"
    | "FLIGHT_STATUS_ON_TIME"
    | "FLIGHT_STATUS_DELAYED"
    | "FLIGHT_STATUS_EARLY"
    | "FLIGHT_STATUS_CANCELED"
    | "FLIGHT_NUMBER_CHANGED";
  shoppingorderGetFlightsChangeResponse: {
    flightChange?: definitions["shoppingorderFlightChange"][];
    /** Format: int32 */
    pages?: number;
  };
  shoppingorderGetOrderPaymentInfoResponse2: {
    paymentId?: string;
    /** Format: int64 */
    serviceCode?: string;
    provider?: string;
    /** Format: int64 */
    expireDate?: string;
    priceChange?: boolean;
    price?: definitions["apishoppingorderTicketPayment"];
  };
  shoppingorderGetZeroRefundResponse: {
    description?: definitions["shoppingorderZeroRefundFlightDescription"];
    title?: string;
    subtitle?: string;
    priceDescription?: string;
    isRoundTrip?: boolean;
    legs?: definitions["shoppingorderZeroRefundFlightLeg"][];
    policies?: string[];
  };
  /**
   * - NOTIFICATION_STATUS_UNDEFINED: مقدار پیش‌فرض (نامشخص)
   *  - NOTIFICATION_STATUS_SENT: ارسال موفقیت‌آمیز
   *  - NOTIFICATION_STATUS_FAILED: ارسال ناموفق
   *  - NOTIFICATION_STATUS_PENDING: در حال ارسال
   * @default NOTIFICATION_STATUS_UNDEFINED
   * @enum {string}
   */
  shoppingorderNotificationStatus:
    | "NOTIFICATION_STATUS_UNDEFINED"
    | "NOTIFICATION_STATUS_SENT"
    | "NOTIFICATION_STATUS_FAILED"
    | "NOTIFICATION_STATUS_PENDING";
  shoppingorderRemoveDiscountResponse: {
    removed?: boolean;
    reason?: string;
    /** Format: uint64 */
    payAmount?: string;
  };
  shoppingorderZeroRefundFlightDescription: {
    text?: string;
    link?: string;
  };
  shoppingorderZeroRefundFlightLeg: {
    flightIds?: string[];
    title?: string;
    subtitle?: string;
    /** Format: int64 */
    price?: string;
    isChecked?: boolean;
  };
}

export interface operations {
  AdminOrder_AirLineNames: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderAirLineList"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetOrdersExcelRequest: {
    parameters: {
      query: {
        orderNumber?: string;
        status?:
          | "ORDERSTATUS_UNDEFINED"
          | "ORDERSTATUS_ORDER_CREATED"
          | "ORDERSTATUS_ORDER_RESERVED"
          | "ORDERSTATUS_CHECKED_OUT"
          | "ORDERSTATUS_PAYMENT_FAILED"
          | "ORDERSTATUS_PAYMENT_SUCCESS"
          | "ORDERSTATUS_BUY_FAILED"
          | "ORDERSTATUS_BUY_PENDING"
          | "ORDERSTATUS_BUY_CONFIRMED"
          | "ORDERSTATUS_CANCELED"
          | "ORDERSTATUS_PARTIALLY_BOUGHT"
          | "ORDERSTATUS_PASSENGER_ADDED";
        flightNumber?: string;
        passengerPhoneNumber?: string;
        passengerNationalCode?: string;
        airline?: string;
        pnr?: string;
        isCharter?: boolean;
        flightType?:
          | "FLIGHT_TYPE_UNDEFINED"
          | "FLIGHT_TYPE_CHARTER"
          | "FLIGHT_TYPE_SYSTEMIC";
        "flightDate.fromDate"?: string;
        "flightDate.tillDate"?: string;
        "ticketIssuedDate.fromDate"?: string;
        "ticketIssuedDate.tillDate"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderAdminDownloadExcelResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_GetRPExcelRequest: {
    parameters: {
      query: {
        orderNumber?: string;
        flightType?:
          | "FLIGHT_TYPE_UNDEFINED"
          | "FLIGHT_TYPE_CHARTER"
          | "FLIGHT_TYPE_SYSTEMIC";
        "flightDate.fromDate"?: string;
        "flightDate.tillDate"?: string;
        "creationDate.fromDate"?: string;
        "creationDate.tillDate"?: string;
        pnr?: string;
        refundRequestTabs?:
          | "REFUND_REQUEST_TAB_ALL"
          | "REFUND_REQUEST_TAB_NEW"
          | "REFUND_REQUEST_TAB_REQUESTED"
          | "REFUND_REQUEST_TAB_PENDING"
          | "REFUND_REQUEST_TAB_REJECTED"
          | "REFUND_REQUEST_TAB_REFUNDED"
          | "REFUND_REQUEST_TAB_PAYEDBACK";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderAdminDownloadExcelResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminFlightChange_AddFlightChange: {
    parameters: {
      body: {
        body: definitions["shoppingorderFlightChangeRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminFlightChange_GetFlightChangeInfo: {
    parameters: {
      query: {
        flightNumber?: string;
        /** timestamp */
        departureDate?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderFlightChangeInfResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminFlightChange_GetFlightChanges: {
    parameters: {
      query: {
        flightNumber?: string;
        "departureDate.fromDate"?: string;
        "departureDate.tillDate"?: string;
        Airline?: string;
        flightChangeStatus?:
          | "FLIGHT_STATUS_UNDEFINED"
          | "FLIGHT_STATUS_ON_TIME"
          | "FLIGHT_STATUS_DELAYED"
          | "FLIGHT_STATUS_EARLY"
          | "FLIGHT_STATUS_CANCELED"
          | "FLIGHT_NUMBER_CHANGED";
        "creationTime.fromDate"?: string;
        "creationTime.tillDate"?: string;
        /**
         * - NOTIFICATION_STATUS_UNDEFINED: مقدار پیش‌فرض (نامشخص)
         *  - NOTIFICATION_STATUS_SENT: ارسال موفقیت‌آمیز
         *  - NOTIFICATION_STATUS_FAILED: ارسال ناموفق
         *  - NOTIFICATION_STATUS_PENDING: در حال ارسال
         */
        notificationStatus?:
          | "NOTIFICATION_STATUS_UNDEFINED"
          | "NOTIFICATION_STATUS_SENT"
          | "NOTIFICATION_STATUS_FAILED"
          | "NOTIFICATION_STATUS_PENDING";
        pageNumber?: number;
        pageLimit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderGetFlightsChangeResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetOrders: {
    parameters: {
      query: {
        pageNumber?: number;
        pageLimit?: number;
        orderNumber?: string;
        status?:
          | "ORDERSTATUS_UNDEFINED"
          | "ORDERSTATUS_ORDER_CREATED"
          | "ORDERSTATUS_ORDER_RESERVED"
          | "ORDERSTATUS_CHECKED_OUT"
          | "ORDERSTATUS_PAYMENT_FAILED"
          | "ORDERSTATUS_PAYMENT_SUCCESS"
          | "ORDERSTATUS_BUY_FAILED"
          | "ORDERSTATUS_BUY_PENDING"
          | "ORDERSTATUS_BUY_CONFIRMED"
          | "ORDERSTATUS_CANCELED"
          | "ORDERSTATUS_PARTIALLY_BOUGHT"
          | "ORDERSTATUS_PASSENGER_ADDED";
        flightNumber?: string;
        passengerPhoneNumber?: string;
        passengerNationalCode?: string;
        airline?: string;
        pnr?: string;
        isCharter?: boolean;
        flightType?:
          | "FLIGHT_TYPE_UNDEFINED"
          | "FLIGHT_TYPE_CHARTER"
          | "FLIGHT_TYPE_SYSTEMIC";
        "flightDate.fromDate"?: string;
        "flightDate.tillDate"?: string;
        "ticketIssuedDate.fromDate"?: string;
        "ticketIssuedDate.tillDate"?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderAdminGetOrdersResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetOrder: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_CalculateRefund: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["flightAdminOrderCalculateRefundBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderAdminRefundResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetRefundReasons: {
    parameters: {
      path: {
        orderId: string;
        flightId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetRefundReasonsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_ManualBuy: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["AdminOrderManualBuyBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetTicketPDF: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetTicketPDFResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetPaymentByOrderID: {
    parameters: {
      query: {
        orderId?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderPaymentInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_GetRRList: {
    parameters: {
      query: {
        pageNumber?: number;
        pageLimit?: number;
        orderNumber?: string;
        flightType?:
          | "FLIGHT_TYPE_UNDEFINED"
          | "FLIGHT_TYPE_CHARTER"
          | "FLIGHT_TYPE_SYSTEMIC";
        "flightDate.fromDate"?: string;
        "flightDate.tillDate"?: string;
        "creationDate.fromDate"?: string;
        "creationDate.tillDate"?: string;
        pnr?: string;
        refundRequestTabs?:
          | "REFUND_REQUEST_TAB_ALL"
          | "REFUND_REQUEST_TAB_NEW"
          | "REFUND_REQUEST_TAB_REQUESTED"
          | "REFUND_REQUEST_TAB_PENDING"
          | "REFUND_REQUEST_TAB_REJECTED"
          | "REFUND_REQUEST_TAB_REFUNDED"
          | "REFUND_REQUEST_TAB_PAYEDBACK";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetRRListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_NewRRAdmin: {
    parameters: {
      body: {
        body: definitions["apishoppingorderRRRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_RRGetActions: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderRRGetActionsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_GetRRComments: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetRRCommentsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_RRSendAction: {
    parameters: {
      path: {
        id: string;
      };
      body: {
        body: definitions["RefundRequestRRSendActionBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  RefundRequest_NewComment: {
    parameters: {
      path: {
        rrId: string;
      };
      body: {
        body: definitions["RefundRequestNewCommentBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_GetTickets: {
    parameters: {
      query: {
        pageNumber?: number;
        ticketNumber?: string;
        flightNumber?: string;
        status?:
          | "TICKETSTATUS_UNDEFINED"
          | "TICKETSTATUS_ISSUED"
          | "TICKETSTATUS_REFUND_REQUESTED"
          | "TICKETSTATUS_REFUND_PROCESSING"
          | "TICKETSTATUS_REFUND_CONFIRMED"
          | "TICKETSTATUS_REFUND_REJECTED"
          | "TICKETSTATUS_REFUND_DONE"
          | "TICKETSTATUS_REFUND_FAILED";
        pnr?: string;
        orderNumber?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderAdminGetTicketsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  AdminOrder_UpdateTicketStatus: {
    parameters: {
      path: {
        ticketId: string;
      };
      body: {
        body: definitions["AdminOrderUpdateTicketStatusBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetOrders: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetOrdersResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_CreateOrder: {
    parameters: {
      body: {
        body: definitions["apishoppingorderCreateOrderRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderCreateOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetOrder: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_AddPassengers: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["OrderAddPassengersBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_CalculateRefund: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["flightOrderCalculateRefundBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderRefundResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_CancelOrder: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["OrderCancelOrderBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_UpdateContactInfo: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["OrderUpdateContactInfoBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_ApplyDiscount: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["OrderApplyDiscountBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderApplyDiscountResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_DiscardDiscount: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderRemoveDiscountResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetRefundReasons: {
    parameters: {
      path: {
        orderId: string;
        flightId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetRefundReasonsResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetOrderPaymentInfo: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetOrderPaymentInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetTicketPDF: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetTicketPDFResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_Refund: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["flightOrderRefundBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderRefundResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_ReserveOrder: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["OrderReserveOrderBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderCreateOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_CreateOrder2: {
    parameters: {
      body: {
        body: definitions["apishoppingorderCreateOrder2Request"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderCreateOrderResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Packages_GetZeroRefund: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderGetZeroRefundResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Packages_ApplyZeroRefund: {
    parameters: {
      path: {
        orderId: string;
      };
      body: {
        body: definitions["PackagesApplyZeroRefundBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetPaymentInfo: {
    parameters: {
      path: {
        orderId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderGetOrderPaymentInfoResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_GetOrderPaymentInfo2: {
    parameters: {
      path: {
        orderId: string;
        acceptPriceChange: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["shoppingorderGetOrderPaymentInfoResponse2"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Order_ReserveOrder2: {
    parameters: {
      path: {
        orderId: string;
        acceptPriceChange: boolean;
      };
      body: {
        body: definitions["OrderReserveOrder2Body"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["apishoppingorderReserveResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
}

export interface external {}
