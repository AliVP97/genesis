/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/passenger": {
    get: operations["Passenger_GetPassengerList"];
    post: operations["Passenger_AddPassenger"];
  };
  "/v1/passenger/batch": {
    post: operations["Passenger_BatchAddPassenger"];
  };
  "/v1/passenger/{id}": {
    get: operations["Passenger_GetPassengerDetail"];
    put: operations["Passenger_UpdatePassenger"];
    delete: operations["Passenger_DeletePassenger"];
  };
  "/v2/countries": {
    get: operations["V2Passenger_GetCountries"];
  };
  "/v2/passenger": {
    get: operations["V2Passenger_GetPassengerList"];
    post: operations["V2Passenger_AddPassenger"];
  };
  "/v2/passenger/batch": {
    post: operations["V2Passenger_BatchAddPassenger"];
  };
  "/v2/passenger/{id}": {
    get: operations["V2Passenger_GetPassengerDetail"];
    put: operations["V2Passenger_UpdatePassenger"];
    delete: operations["V2Passenger_DeletePassenger"];
  };
  "/v3/options": {
    get: operations["V3Passenger_GetOptions"];
  };
  "/v3/passenger": {
    get: operations["V3Passenger_GetPassengerList"];
    post: operations["V3Passenger_AddPassenger"];
  };
  "/v3/passenger/fields/{serviceName}": {
    get: operations["V3Passenger_AddPassengerData"];
  };
  "/v3/passenger/{id}": {
    get: operations["V3Passenger_GetPassengerDetail"];
    put: operations["V3Passenger_UpdatePassenger"];
    delete: operations["V3Passenger_DeletePassenger"];
  };
}

export interface definitions {
  apipassengerAddPassengerData: {
    fields?: definitions["passengerField"][];
    /** optional field //optional field */
    mandatoryTitle?: string;
    /** optional field //optional field */
    optionalTitle?: string;
    /** optional field //optional field */
    needUpdateStep?: boolean;
  };
  passengerAddPassengerDataResponseV3: {
    addPassengerData?: definitions["apipassengerAddPassengerData"][];
    serviceName?: definitions["passengerService"];
  };
  passengerAddPassengerRequest: {
    /** optional field //optional field */
    fields?: definitions["passengerFieldUpdateRequest"][];
    /** optional field //optional field */
    serviceName?: definitions["passengerService"];
    referenceDate?: string;
  };
  /**
   * @default AGE_TYPE_UNDEFINED
   * @enum {string}
   */
  passengerAgeType:
    | "AGE_TYPE_UNDEFINED"
    | "AGE_TYPE_ADULT"
    | "AGE_TYPE_CHILD"
    | "AGE_TYPE_INFANT";
  passengerBatchAddPassengerRequest: {
    passengers?: definitions["passengerPassengerModel"][];
  };
  /**
   * @default CALENDAR_TYPE_UNDEFINED
   * @enum {string}
   */
  passengerCalendarType:
    | "CALENDAR_TYPE_UNDEFINED"
    | "CALENDAR_TYPE_GREGORIAN"
    | "CALENDAR_TYPE_Hijri";
  passengerCountryModel: {
    /** Format: int64 */
    id?: string;
    countryNameEn?: string;
    countryNameFa?: string;
    countryAlpha3?: string;
    countryAlpha2?: string;
  };
  passengerCountryV3: {
    id?: string;
    /** optional field */
    englishCountryName?: string;
    /** optional field */
    persianCountryName?: string;
    /** optional field */
    countryAlpha3?: string;
    /** optional field */
    countryAlpha2?: string;
  };
  passengerField: {
    id?: string;
    /** optional field */
    title?: string;
    /** optional field */
    value?: string;
    /** optional field */
    fieldType?: definitions["passengerFieldType"];
    /** optional field */
    inputRegex?: string;
    /** optional field */
    isReadonly?: boolean;
    /** optional field */
    isOptional?: boolean;
    /** optional field */
    valueHijri?: string;
    /** optional field */
    options?: definitions["passengerOption"][];
    /** optional field */
    errorOnRegex?: string;
    /** optional field */
    errorOnEmptyInput?: string;
    /** optional field */
    calendarType?: definitions["passengerCalendarType"];
  };
  /**
   * @default FIELD_TYPE_UNDEFINED
   * @enum {string}
   */
  passengerFieldType:
    | "FIELD_TYPE_UNDEFINED"
    | "FIELD_TYPE_TEXT"
    | "FIELD_TYPE_NUMBER"
    | "FIELD_TYPE_DATE"
    | "FIELD_TYPE_EMAIL"
    | "FIELD_TYPE_TEL"
    | "FIELD_TYPE_OPTIONS"
    | "FIELD_TYPE_CHECKBOX"
    | "FIELD_TYPE_COUNTRY";
  passengerFieldUpdateRequest: {
    id?: string;
    /** optional field */
    value?: string;
  };
  /**
   * @default GENDER_TYPE_UNDEFINED
   * @enum {string}
   */
  passengerGenderType:
    | "GENDER_TYPE_UNDEFINED"
    | "GENDER_TYPE_FEMALE"
    | "GENDER_TYPE_MALE"
    | "Gender_TYPE_RATHER_NOT_SAY";
  passengerGetCountriesResponse: {
    countries?: definitions["passengerCountryModel"][];
  };
  passengerGetOptionsResponseV3: {
    /** optional field */
    countries?: definitions["passengerCountryV3"][];
    /** optional field */
    options?: { [key: string]: definitions["passengerOptions"] };
  };
  passengerGetPassengersResponse: {
    passengers?: definitions["passengerInternalPassengerModel"][];
  };
  passengerInternalCountryObject: {
    countryNameEn?: string;
    countryNameFa?: string;
    countryAlpha3?: string;
    countryAlpha2?: string;
  };
  passengerInternalPassengerModel: {
    id?: string;
    persianName?: string;
    persianFamily?: string;
    englishName?: string;
    englishFamily?: string;
    nationalId?: string;
    /** Format: int64 */
    birthday?: string;
    passportId?: string;
    /** Format: int64 */
    passportExpireDate?: string;
    passportCountry?: string;
    /** Format: int64 */
    passportCreationDate?: string;
    phoneNumber?: string;
    email?: string;
    nationality?: string;
    gender?: definitions["passengerGenderType"];
    ageType?: definitions["passengerAgeType"];
    passengerType?: definitions["passengerPassengerType"];
    nationalityDetail?: definitions["passengerInternalCountryObject"];
    passportCountryDetail?: definitions["passengerInternalCountryObject"];
  };
  passengerOption: {
    id?: string;
    title?: string;
  };
  passengerOptions: {
    options?: definitions["passengerOption"][];
  };
  passengerPassengerId: {
    id?: string;
  };
  passengerPassengerIdV3: {
    id?: string;
    serviceName?: string;
  };
  passengerPassengerListResponse: {
    passengerList?: definitions["passengerPassengerModel"][];
  };
  passengerPassengerListResponseV3: {
    /** optional field */
    passengers?: definitions["passengerPassengerV3"][];
    /** optional field */
    note?: string;
  };
  passengerPassengerModel: {
    id?: string;
    persianName?: string;
    persianFamily?: string;
    englishName?: string;
    englishFamily?: string;
    nationalId?: string;
    birthday?: string;
    passportId?: string;
    passportExpireDate?: string;
    passportCountry?: string;
    passportCreationDate?: string;
    phoneNumber?: string;
    email?: string;
    nationality?: string;
    gender?: definitions["passengerGenderType"];
    ageType?: definitions["passengerAgeType"];
    passengerType?: definitions["passengerPassengerType"];
  };
  /**
   * @default PASSENGER_TYPE_UNDEFINED
   * @enum {string}
   */
  passengerPassengerType:
    | "PASSENGER_TYPE_UNDEFINED"
    | "PASSENGER_TYPE_NATIONAL_CARD"
    | "PASSENGER_TYPE_PASSPORT"
    | "PASSENGER_TYPE_BOTH";
  passengerPassengerUpdatePassengerBody: {
    persianName?: string;
    persianFamily?: string;
    englishName?: string;
    englishFamily?: string;
    nationalId?: string;
    birthday?: string;
    passportId?: string;
    passportExpireDate?: string;
    passportCountry?: string;
    passportCreationDate?: string;
    phoneNumber?: string;
    email?: string;
    nationality?: string;
    gender?: definitions["passengerGenderType"];
    ageType?: definitions["passengerAgeType"];
    passengerType?: definitions["passengerPassengerType"];
  };
  passengerPassengerV3: {
    id?: string;
    /** optional field //optional field */
    fields?: definitions["passengerField"][];
    /** optional field //optional field */
    serviceName?: definitions["passengerService"];
    /** optional field //optional field */
    mandatoryTitle?: string;
    /** optional field //optional field */
    optionalTitle?: string;
    ageType?: definitions["passengerAgeType"];
  };
  passengerService: {
    serviceName?: string;
    referenceDate?: string;
  };
  passengerV2AddPassengerModel: {
    id?: string;
    persianName?: string;
    persianFamily?: string;
    englishName?: string;
    englishFamily?: string;
    nationalId?: string;
    /** Format: int64 */
    birthday?: string;
    birthdayString?: string;
    passportId?: string;
    /** Format: int64 */
    passportExpireDate?: string;
    passportExpireDateString?: string;
    /** Format: int64 */
    passportCreationDate?: string;
    passportCreationDateString?: string;
    phoneNumber?: string;
    email?: string;
    gender?: definitions["passengerGenderType"];
    ageType?: definitions["passengerAgeType"];
    passengerType?: definitions["passengerPassengerType"];
    /** Format: int64 */
    countryId?: string;
    hijriBirthdayString?: string;
    hijriPassportExpiredDateString?: string;
  };
  passengerV2BatchAddPassengerRequest: {
    passengers?: definitions["passengerV2AddPassengerModel"][];
  };
  passengerV2PassengerId: {
    id?: string;
  };
  passengerV2PassengerListResponse: {
    passengerList?: definitions["passengerV2PassengerModel"][];
  };
  passengerV2PassengerModel: {
    id?: string;
    persianName?: string;
    persianFamily?: string;
    englishName?: string;
    englishFamily?: string;
    nationalId?: string;
    /** Format: int64 */
    birthday?: string;
    birthdayString?: string;
    passportId?: string;
    /** Format: int64 */
    passportExpireDate?: string;
    passportExpireDateString?: string;
    passportCountry?: string;
    /** Format: int64 */
    passportCreationDate?: string;
    passportCreationDateString?: string;
    phoneNumber?: string;
    email?: string;
    nationality?: string;
    gender?: definitions["passengerGenderType"];
    ageType?: definitions["passengerAgeType"];
    passengerType?: definitions["passengerPassengerType"];
    countryObject?: definitions["passengerCountryModel"];
    hijriBirthdayString?: string;
    hijriPassportExpiredDateString?: string;
  };
  passengerV2PassengerUpdatePassengerBody: {
    persianName?: string;
    persianFamily?: string;
    englishName?: string;
    englishFamily?: string;
    nationalId?: string;
    /** Format: int64 */
    birthday?: string;
    birthdayString?: string;
    passportId?: string;
    /** Format: int64 */
    passportExpireDate?: string;
    passportExpireDateString?: string;
    /** Format: int64 */
    passportCreationDate?: string;
    passportCreationDateString?: string;
    phoneNumber?: string;
    email?: string;
    gender?: definitions["passengerGenderType"];
    ageType?: definitions["passengerAgeType"];
    passengerType?: definitions["passengerPassengerType"];
    /** Format: int64 */
    countryId?: string;
    hijriBirthdayString?: string;
    hijriPassportExpiredDateString?: string;
  };
  passengerV3PassengerUpdatePassengerBody: {
    /** optional field //optional field */
    fields?: definitions["passengerFieldUpdateRequest"][];
    /** optional field //optional field */
    serviceName?: definitions["passengerService"];
    referenceDate?: string;
  };
  protobufAny: {
    "@type"?: string;
  } & { [key: string]: unknown };
  rpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
}

export interface operations {
  Passenger_GetPassengerList: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Passenger_AddPassenger: {
    parameters: {
      body: {
        body: definitions["passengerPassengerModel"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerId"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Passenger_BatchAddPassenger: {
    parameters: {
      body: {
        body: definitions["passengerBatchAddPassengerRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Passenger_GetPassengerDetail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerModel"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Passenger_UpdatePassenger: {
    parameters: {
      path: {
        id: string;
      };
      body: {
        body: definitions["passengerPassengerUpdatePassengerBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerModel"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Passenger_DeletePassenger: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerId"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_GetCountries: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerGetCountriesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_GetPassengerList: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerV2PassengerListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_AddPassenger: {
    parameters: {
      body: {
        body: definitions["passengerV2AddPassengerModel"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerV2PassengerId"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_BatchAddPassenger: {
    parameters: {
      body: {
        body: definitions["passengerV2BatchAddPassengerRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_GetPassengerDetail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerV2PassengerModel"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_UpdatePassenger: {
    parameters: {
      path: {
        id: string;
      };
      body: {
        body: definitions["passengerV2PassengerUpdatePassengerBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerV2PassengerModel"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V2Passenger_DeletePassenger: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerV2PassengerId"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_GetOptions: {
    parameters: {
      query: {
        serviceName?: string;
        referenceDate?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerGetOptionsResponseV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_GetPassengerList: {
    parameters: {
      query: {
        serviceName?: string;
        referenceDate?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerListResponseV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_AddPassenger: {
    parameters: {
      body: {
        body: definitions["passengerAddPassengerRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_AddPassengerData: {
    parameters: {
      path: {
        serviceName: string;
      };
      query: {
        referenceDate?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerAddPassengerDataResponseV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_GetPassengerDetail: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        serviceName?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_UpdatePassenger: {
    parameters: {
      path: {
        id: string;
      };
      body: {
        body: definitions["passengerV3PassengerUpdatePassengerBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  V3Passenger_DeletePassenger: {
    parameters: {
      path: {
        id: string;
      };
      query: {
        serviceName?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["passengerPassengerIdV3"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
}

export interface external {}
