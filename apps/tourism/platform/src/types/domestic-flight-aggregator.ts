/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/admin/Agencies": {
    get: operations["Admin_GetAllAgencies"];
  };
  "/v1/admin/Airlines": {
    get: operations["Admin_GetAllAirlines"];
  };
  "/v1/admin/CharterRule": {
    post: operations["Admin_AddCharterRule"];
    patch: operations["Admin_EditCharterRule"];
  };
  "/v1/admin/CharterRule/{batchId}": {
    delete: operations["Admin_DeleteCharterRule"];
  };
  "/v1/admin/CharterRule/{ruleId}": {
    get: operations["Admin_GetCharterRule"];
  };
  "/v1/admin/CharterRules": {
    get: operations["Admin_GetCharterRules"];
  };
  "/v1/admin/CreditLimits": {
    get: operations["Providers_GetProvidersLimit"];
    delete: operations["Providers_DeleteCreditLimit"];
  };
  "/v1/admin/CreditLimits/{id}": {
    get: operations["Providers_GetProviderLimit"];
  };
  "/v1/admin/RulesHistory": {
    get: operations["Admin_SearchRulesHistory"];
  };
  "/v1/admin/addCreditLimit": {
    post: operations["Providers_AddCreditLimit"];
  };
  "/v1/admin/cachepolicy": {
    get: operations["Cache_GetRules"];
    post: operations["Cache_AddNewRule"];
    patch: operations["Cache_EditRule"];
  };
  "/v1/admin/charterFlights": {
    get: operations["Admin_CharterFlights"];
  };
  "/v1/admin/charterProviders": {
    get: operations["Providers_GetCharterProviders"];
  };
  "/v1/admin/charterProvidersAgencies": {
    get: operations["Providers_GetProvidersAgency"];
  };
  "/v1/admin/flightproviders/{id}": {
    delete: operations["Providers_DeleteProvider"];
  };
  "/v1/admin/flightproviders/{providerId}": {
    patch: operations["Providers_EditProviderActivation"];
  };
  "/v1/admin/frequentcities": {
    get: operations["Admin_ReadAllFrequentCities"];
    post: operations["Admin_CreateNewFrequentCity"];
  };
  "/v1/admin/frequentcities/{id}": {
    delete: operations["Admin_DeleteFrequentCity"];
  };
  "/v1/admin/providers": {
    get: operations["Providers_GetProviders"];
    post: operations["Providers_AddProvider"];
  };
  "/v1/admin/providers-name": {
    get: operations["Providers_ListProvidersNameOnly"];
  };
  "/v1/airports": {
    get: operations["Flight_Airports"];
  };
  "/v1/calendar": {
    get: operations["Flight_GetCalenderData"];
  };
  "/v1/domesticflight": {
    get: operations["Flight_GetFlightClient"];
  };
  "/v1/domesticflight/alert": {
    get: operations["Flight_AlertData"];
    post: operations["Flight_SetAlert"];
  };
  "/v1/domesticflights": {
    get: operations["Flight_FlightList"];
  };
  "/v1/domesticflights/prepare": {
    post: operations["Flight_PrepareFlightList"];
  };
  "/v1/frequentcities": {
    get: operations["Flight_ReadAllFrequentCities"];
  };
}

export interface definitions {
  ProvidersEditProviderActivationBody: {
    activation?: boolean;
  };
  /**
   * @default ACTIVE_TYPE_UNDEFINED
   * @enum {string}
   */
  aggregatorActiveType:
    | "ACTIVE_TYPE_UNDEFINED"
    | "ACTIVE_TYPE_ACTIVE"
    | "ACTIVE_TYPE_DE_ACTIVE";
  aggregatorAddAgencyRule: {
    providerId?: string;
    agencyId?: string;
    isActive?: boolean;
  };
  aggregatorAddApprovedPriceRule: {
    /** Format: int64 */
    minPrice?: string;
    /** Format: int64 */
    maxPrice?: string;
    originIATA?: string;
    /**
     * string originName = 4;
     * @description string destinationName = 6;
     */
    destinationIATA?: string;
  };
  aggregatorAddCachePolicyRequest: {
    providerName?: string;
    /** Format: int64 */
    timeToFlightInSeconds?: string;
    /** Format: int64 */
    cacheTimeDurationInSeconds?: string;
    arrivalIata?: string;
    departureIata?: string;
    isActive?: boolean;
    /** Format: int64 */
    hotSeasonStartTime?: string;
    /** Format: int64 */
    hotSeasonEndTime?: string;
    comment?: string;
    /** Format: int64 */
    validTill?: string;
  };
  aggregatorAddCharterRuleRequest: {
    ruleType?: definitions["aggregatorRuleType"];
    generalRule?: definitions["aggregatorAddGeneralRule"];
    specificRule?: definitions["aggregatorAddSpecificRule"];
    agencyRule?: definitions["aggregatorAddAgencyRule"];
    approvedPriceRule?: definitions["aggregatorAddApprovedPriceRule"];
    IsActive?: boolean;
  };
  aggregatorAddCreditLimitRequest: {
    providerId?: string;
    phoneNumber?: string[];
    /** Format: uint64 */
    creditLimit?: string;
  };
  aggregatorAddGeneralRule: {
    providerId?: string;
    agencyId?: string;
    fromDate?: string;
    toDate?: string;
    /** Format: int64 */
    AdditionalPrice?: string;
  };
  aggregatorAddSpecificRule: {
    providerId?: string;
    agencyId?: string;
    fromDate?: string;
    toDate?: string;
    flightNumber?: string;
    /** Format: int32 */
    markupPercent?: number;
    /** Format: int32 */
    discountPercent?: number;
    airlineCode?: string;
    originIATA?: string;
    /**
     * string originName = 10;
     * @description string destinationName = 12;
     */
    destinationIATA?: string;
  };
  aggregatorAdminCharterFlight: {
    flightId?: string;
    isForeign?: boolean;
    departureDate?: string;
    flightNumber?: string;
    origin?: string;
    destination?: string;
    providerId?: string;
    providerName?: string;
    agencyId?: string;
    agencyName?: string;
    agencyCode?: string;
    airlineCode?: string;
    airlineName?: string;
    /** Format: int32 */
    price?: number;
    /**
     * نرخ خرید
     * Format: int32
     */
    purchasePrice?: number;
    /** Format: int32 */
    finalPrice?: number;
    /** Format: int32 */
    commissionPrice?: number;
    /** Format: int32 */
    commissionPercent?: number;
    /** Format: int32 */
    markupPrice?: number;
    /** Format: int32 */
    markupPercent?: number;
    /** Format: int32 */
    discountPercent?: number;
    /** Format: int32 */
    discountPrice?: number;
    /**
     * x
     * Format: int32
     */
    minApprovedPrice?: number;
    /**
     * x
     * Format: int32
     */
    maxApprovedPrice?: number;
    /**
     * x
     * Format: int32
     */
    additionalPrice?: number;
    specificRuleId?: string;
    generalRuleId?: string;
    agencyRuleId?: string;
    approvedPriceRuleId?: string;
    isActive?: boolean;
    hasWarn?: boolean;
  };
  aggregatorAdminCharterFlightList: {
    flights?: definitions["aggregatorAdminCharterFlight"][];
    finished?: boolean;
    /** Format: int32 */
    percent?: number;
    /** Format: int32 */
    pages?: number;
  };
  aggregatorAgencies: {
    agencies?: definitions["aggregatorAgency"][];
  };
  aggregatorAgency: {
    id?: string;
    name?: string;
  };
  aggregatorAgencyInfo: {
    agencyName?: string;
    isActive?: boolean;
    agencyCode?: string;
  };
  aggregatorAgencyRuleInfo: {
    providerName?: string;
    agencyName?: string;
    agencyId?: string;
    isActive?: boolean;
  };
  aggregatorAirlines: {
    airlines?: definitions["domesticflightaggregatorAirline"][];
  };
  aggregatorAirportSearchResponse: {
    cities?: definitions["aggregatorCitySearchResult"][];
    airports?: definitions["domesticflightaggregatorAirport"][];
  };
  aggregatorAlertDataResponse: {
    message?: definitions["aggregatorText"];
    Header?: definitions["aggregatorText"];
    formItems?: definitions["aggregatorFormItem"][];
    activation?: boolean;
    origin?: string;
    originIata?: string;
    destination?: string;
    destinationIata?: string;
    persianTime?: string;
    departureDate?: string;
    selectedOptionText?: string;
    formText?: string;
  };
  aggregatorAlertInput: {
    formItemID?: string;
    formItemFieldID?: string;
  };
  aggregatorApprovedPriceRuleInfo: {
    /** Format: int64 */
    minPrice?: string;
    /** Format: int64 */
    maxPrice?: string;
    endpoint1?: string;
    endpoint2?: string;
  };
  /**
   * @default PERSIAN
   * @enum {string}
   */
  aggregatorCalendarType: "PERSIAN" | "GREGORIAN";
  aggregatorCalenderData: {
    minimumPrice?: string;
    gregorianDepartureDate?: string;
    persianDepartureDate?: string;
    isUpdated?: boolean;
  };
  aggregatorCharterProviderInfo: {
    id?: string;
    name?: string;
    /** Format: int64 */
    Credit?: string;
    isActive?: boolean;
  };
  aggregatorCharterProvidersInfo: {
    charterProviderInfo?: definitions["aggregatorCharterProviderInfo"][];
  };
  aggregatorCharterRule: {
    isActive?: boolean;
    hasWarn?: boolean;
    ruleId?: string;
    batchId?: string;
    userName?: string;
    createdTime?: string;
    ruleType?: definitions["aggregatorRuleType"];
    generalRuleInfo?: definitions["aggregatorGeneralRuleInfo"];
    specificRuleInfo?: definitions["aggregatorSpecificRuleInfo"];
    agencyRuleInfo?: definitions["aggregatorAgencyRuleInfo"];
    approvedPriceRuleInfo?: definitions["aggregatorApprovedPriceRuleInfo"];
  };
  aggregatorCharterRules: {
    charterRules?: definitions["aggregatorCharterRule"][];
    /** Format: int32 */
    pageNumbers?: number;
  };
  aggregatorCharterRulesHistoryFilter: {
    isForeign?: boolean;
    creationDate?: string;
    /** Format: int32 */
    discount?: number;
    /** Format: int32 */
    markUp?: number;
    /**
     * مارک آپ عمومی
     * Format: int32
     */
    additionalPrice?: number;
    providerId?: string;
    agenciesId?: string[];
    fromDate?: string;
    toDate?: string;
    airlineCode?: string;
    flightNumber?: string;
    originIata?: string;
    destinationIata?: string;
    userName?: string;
    /** Format: int32 */
    minPrice?: number;
    /** Format: int32 */
    maxPrice?: number;
    hasWarn?: boolean;
    isActive?: boolean;
  };
  aggregatorCitySearchResult: {
    city?: definitions["domesticflightaggregatorCity"];
    country?: definitions["domesticflightaggregatorCountry"];
    airports?: definitions["domesticflightaggregatorAirport"][];
  };
  aggregatorCreditLimit: {
    providerId?: string;
    phoneNumber?: string[];
    /** Format: uint64 */
    creditLimit?: string;
    providerName?: string;
  };
  aggregatorCreditLimits: {
    creditLimits?: definitions["aggregatorCreditLimit"][];
  };
  aggregatorDiscount: {
    /** Format: int32 */
    flat?: number;
    /** Format: int32 */
    percent?: number;
  };
  aggregatorEditApprovedPriceRule: {
    /** Format: int64 */
    minPrice?: string;
    /** Format: int64 */
    maxPrice?: string;
  };
  aggregatorEditCachePolicyRequest: {
    ruleId?: string;
    isActive?: boolean;
    comment?: string;
  };
  aggregatorEditCharterRuleRequest: {
    ruleType?: definitions["aggregatorRuleType"];
    batchId?: string;
    generalRule?: definitions["aggregatorEditGeneralRule"];
    specificRule?: definitions["aggregatorEditSpecificRule"];
    approvedPriceRule?: definitions["aggregatorEditApprovedPriceRule"];
    activation?: boolean;
  };
  aggregatorEditGeneralRule: {
    /** Format: int64 */
    additionalPrice?: string;
  };
  aggregatorEditSpecificRule: {
    /** Format: int32 */
    markupPercent?: number;
    /** Format: int32 */
    discountPercent?: number;
  };
  aggregatorFlightListResponse: {
    flightQueryResult?: definitions["aggregatorFlightQueryResult"][];
    requestID?: string;
    imageCDN?: string;
    finished?: boolean;
    /** Format: int32 */
    percent?: number;
    suggestion?: definitions["aggregatorSuggestions"];
  };
  aggregatorFlightQueryResult: {
    flightList?: definitions["domesticflightaggregatorFlightInfo"][];
    calendarData?: definitions["aggregatorCalenderData"][];
    alert?: boolean;
  };
  /**
   * @default FLIGHT_SOURCE_UNDEFINED
   * @enum {string}
   */
  aggregatorFlightSource:
    | "FLIGHT_SOURCE_UNDEFINED"
    | "FLIGHT_SOURCE_FLIGHT_LIST"
    | "FLIGHT_SOURCE_SUGGESTION_NEAREST"
    | "FLIGHT_SOURCE_SUGGESTION_LOWEST_PRICE";
  aggregatorFormItem: {
    id?: string;
    title?: string;
    formItemType?: definitions["aggregatorFormItemType"];
    formItemFields?: definitions["aggregatorFormItemField"][];
  };
  aggregatorFormItemField: {
    id?: string;
    title?: string;
    selected?: boolean;
  };
  /**
   * @default FORM_ITEM_DROP_DOWN
   * @enum {string}
   */
  aggregatorFormItemType: "FORM_ITEM_DROP_DOWN";
  aggregatorFrequentAirportCityRequest: {
    iata?: string;
    /** Format: int32 */
    rank?: number;
  };
  aggregatorFrequentAirportCityResponse: {
    airports?: definitions["domesticflightaggregatorAirport"][];
  };
  aggregatorGeneralRuleInfo: {
    providerName?: string;
    agencyName?: string;
    fromDate?: string;
    toDate?: string;
    /** Format: int64 */
    AdditionalPrice?: string;
  };
  aggregatorGetAllRulesResponse: {
    rules?: definitions["aggregatorRule"][];
    /** Format: int32 */
    pages?: number;
  };
  aggregatorGetCalenderDataResponse: {
    calendarData?: definitions["aggregatorCalenderData"][];
  };
  aggregatorGetFlightInfoResponse: {
    flightInfo?: definitions["aggregatorInternalFlightInfo"][];
  };
  aggregatorGetProvidersResponse: {
    providers?: definitions["aggregatorProvider"][];
  };
  aggregatorInternalFareDetail: {
    /** Format: int64 */
    finalPrice?: string;
    /** Format: int64 */
    providerBasePrice?: string;
    /** Format: float */
    providerCommissionPercent?: number;
    /** Format: float */
    chargedCommissionPercent?: number;
    /** Format: int64 */
    markup?: string;
    ruleId?: string;
  };
  aggregatorInternalFlightInfo: {
    /** Format: int64 */
    price?: number;
    /** Format: int64 */
    remainingSeats?: number;
    isCharter?: boolean;
    airline?: definitions["domesticflightaggregatorAirline"];
    flightClass?: definitions["domesticflightaggregatorFlightClass"];
    /** Format: int32 */
    numberOfStops?: number;
    /** Format: int32 */
    totalStopDuration?: number;
    departure?: definitions["domesticflightaggregatorFlightEndpoint"];
    arrival?: definitions["domesticflightaggregatorFlightEndpoint"];
    flightId?: string;
    airplaneModel?: string;
    promotion?: definitions["aggregatorPromotion"];
    flightNumber?: string;
    fare?: definitions["domesticflightaggregatorFare"];
    fareClass?: string;
    options?: string[];
    /** Format: int32 */
    priority?: number;
    allowedBaggage?: definitions["domesticflightaggregatorBaggage"][];
    refundPolicy?: definitions["domesticflightaggregatorRefundPolicyItem"][];
    providerName?: string;
    agency?: string;
    fareDetails?: definitions["aggregatorInternalFareDetail"];
  };
  aggregatorPrepareFlightListRequest: {
    query?: definitions["domesticflightaggregatorFlightListQuery"][];
  };
  aggregatorPrepareFlightListResponse: {
    requestID?: string;
    /** Format: int32 */
    validForSeconds?: number;
    /** Format: int32 */
    maxRequests?: number;
    /** Format: int32 */
    secondsBetweenRequests?: number;
    loadingMessage?: string;
  };
  aggregatorPromotion: {
    onThis?: definitions["aggregatorDiscount"];
    onNext?: definitions["aggregatorDiscount"];
  };
  aggregatorProvider: {
    id?: string;
    prefix?: string;
    serviceId?: string;
    serviceName?: string;
    serviceFarsiName?: string;
    url?: string;
    detail?: { [key: string]: string };
    active?: boolean;
    /** Format: int32 */
    responseTimeSeconds?: number;
    noCache?: boolean;
    /** Format: int64 */
    credit?: string;
    /** Format: int64 */
    creditLimit?: string;
    phoneNumber?: string[];
    updatedAt?: string;
    providerType?: definitions["aggregatorProviderType"];
  };
  /**
   * @default OnlyActives
   * @enum {string}
   */
  aggregatorProviderActivationFilter: "OnlyActives" | "All";
  aggregatorProviderAgencies: {
    agenciesInfo?: definitions["aggregatorAgencyInfo"][];
  };
  /**
   * @default UNDEFINED_PROVIDER_TYPE
   * @enum {string}
   */
  aggregatorProviderType:
    | "UNDEFINED_PROVIDER_TYPE"
    | "SYSTEM_PROVIDER_TYPE"
    | "CHARTER_PROVIDER_TYPE"
    | "BOTH_PROVIDER_TYPE";
  aggregatorProvidersNameOnly: {
    names?: string[];
  };
  aggregatorRule: {
    providerName?: string;
    /** Format: int64 */
    timeToFlightInSeconds?: string;
    /** Format: int64 */
    cacheTimeDurationInSeconds?: string;
    arrivalIata?: string;
    departureIata?: string;
    isActive?: boolean;
    /** Format: int64 */
    hotSeasonStartTime?: string;
    /** Format: int64 */
    hotSeasonEndTime?: string;
    comment?: string;
    /** Format: int64 */
    validTill?: string;
    ruleId?: string;
    /** Format: int64 */
    ruleCreationTime?: string;
    /** Format: int64 */
    ruleNumber?: string;
  };
  aggregatorRuleHistory: {
    /** alwayes two rules */
    charterRule?: definitions["aggregatorCharterRule"][];
    action?: definitions["domesticflightaggregatorAction"];
  };
  /**
   * @default UNDEFINED_RULE
   * @enum {string}
   */
  aggregatorRuleType:
    | "UNDEFINED_RULE"
    | "GENERAL_RULE"
    | "SPECIFIC_RULE"
    | "AGENCY_RULE"
    | "APPROVED_PRICE_RULE";
  aggregatorRulesHistory: {
    /** Format: int32 */
    pages?: number;
    ruleHistory?: definitions["aggregatorRuleHistory"][];
  };
  aggregatorSetAlertRequest: {
    originIATA?: string;
    destinationIATA?: string;
    departureDate?: string;
    activation?: boolean;
    alertInputs?: definitions["aggregatorAlertInput"][];
  };
  aggregatorSetAlertResponse: {
    activation?: boolean;
    selectedOptionText?: string;
  };
  aggregatorSpecificRuleInfo: {
    providerName?: string;
    agencyName?: string;
    fromDate?: string;
    toDate?: string;
    flightNumber?: string;
    /** Format: int64 */
    markupPercent?: string;
    /** Format: int64 */
    discountPercent?: string;
    originIATA?: string;
    originName?: string;
    destinationIATA?: string;
    destinationName?: string;
    airlineName?: string;
  };
  /**
   * @default SUGGESTION_TYPE_UNDEFINED
   * @enum {string}
   */
  aggregatorSuggestType:
    | "SUGGESTION_TYPE_UNDEFINED"
    | "SUGGESTION_TYPE_LOWESTPRICE"
    | "SUGGESTION_TYPE_NEAREST";
  aggregatorSuggestedFlights: {
    /** Format: int64 */
    price?: number;
    /** Format: int64 */
    remainingSeats?: number;
    isCharter?: boolean;
    airline?: definitions["domesticflightaggregatorAirline"];
    flightClass?: definitions["domesticflightaggregatorFlightClass"];
    /** Format: int64 */
    numberOfStops?: number;
    /** Format: int64 */
    totalStopDuration?: number;
    departure?: definitions["domesticflightaggregatorFlightEndpoint"];
    arrival?: definitions["domesticflightaggregatorFlightEndpoint"];
    flightID?: string;
    airplaneModel?: string;
    promotion?: definitions["aggregatorPromotion"];
    flightNumber?: string;
    fare?: definitions["domesticflightaggregatorFare"];
    fareClass?: string;
    options?: string[];
    /** Format: int32 */
    priority?: number;
    allowedBaggage?: definitions["domesticflightaggregatorBaggage"][];
    refundPolicy?: definitions["domesticflightaggregatorRefundPolicyItem"][];
    /** Format: int32 */
    commission?: number;
    agency?: string;
    suggestType?: definitions["aggregatorSuggestType"];
    categoryTitle?: string;
    titleColorCode?: string;
    backgroundColorCode?: string;
    flightSource?: definitions["aggregatorFlightSource"];
  };
  aggregatorSuggestions: {
    suggests?: definitions["aggregatorSuggestedFlights"][];
    message?: string;
  };
  aggregatorText: {
    title?: string;
    colorCode?: string;
  };
  /**
   * @default RULE_UNDEFINED
   * @enum {string}
   */
  domesticflightaggregatorAction:
    | "RULE_UNDEFINED"
    | "RULE_EDITED"
    | "RULE_ADDED"
    | "RULE_DELETED";
  domesticflightaggregatorAirline: {
    code?: string;
    name?: string;
    icao?: string;
    EnglishName?: string;
  };
  domesticflightaggregatorAirport: {
    country?: definitions["domesticflightaggregatorCountry"];
    city?: definitions["domesticflightaggregatorCity"];
    name?: definitions["domesticflightaggregatorName"];
    iata?: string;
  };
  domesticflightaggregatorBaggage: {
    code?: string;
    name?: definitions["domesticflightaggregatorName"];
    /** Format: int32 */
    count?: number;
    /** Format: int32 */
    weight?: number;
    /** Format: int32 */
    adultAndChildWeight?: number;
    /** Format: int32 */
    infantWeight?: number;
  };
  domesticflightaggregatorCity: {
    name?: definitions["domesticflightaggregatorName"];
    iata?: string;
  };
  domesticflightaggregatorCountry: {
    twoLetterCode?: string;
    code?: string;
    name?: definitions["domesticflightaggregatorName"];
  };
  domesticflightaggregatorDateQuery: {
    /** Format: int64 */
    fromDate?: string;
    /** Format: int64 */
    tillDate?: string;
  };
  domesticflightaggregatorFare: {
    /** Format: int64 */
    adult?: number;
    /** Format: int64 */
    child?: number;
    /** Format: int64 */
    infant?: number;
    title?: string;
  };
  /**
   * @default UNDEFINED
   * @enum {string}
   */
  domesticflightaggregatorFlightClass:
    | "UNDEFINED"
    | "ECONOMY"
    | "BUSINESS"
    | "PREMIUM";
  domesticflightaggregatorFlightEndpoint: {
    /** Format: int32 */
    date?: number;
    dateString?: string;
    dateHourString?: string;
    terminal?: string;
    airport?: definitions["domesticflightaggregatorAirport"];
  };
  domesticflightaggregatorFlightInfo: {
    /** Format: int64 */
    price?: number;
    /** Format: int64 */
    remainingSeats?: number;
    isCharter?: boolean;
    airline?: definitions["domesticflightaggregatorAirline"];
    flightClass?: definitions["domesticflightaggregatorFlightClass"];
    /** Format: int64 */
    numberOfStops?: number;
    /** Format: int64 */
    totalStopDuration?: number;
    departure?: definitions["domesticflightaggregatorFlightEndpoint"];
    arrival?: definitions["domesticflightaggregatorFlightEndpoint"];
    flightID?: string;
    airplaneModel?: string;
    promotion?: definitions["aggregatorPromotion"];
    flightNumber?: string;
    fare?: definitions["domesticflightaggregatorFare"];
    fareClass?: string;
    options?: string[];
    /** Format: int32 */
    priority?: number;
    allowedBaggage?: definitions["domesticflightaggregatorBaggage"][];
    refundPolicy?: definitions["domesticflightaggregatorRefundPolicyItem"][];
    /** Format: int32 */
    commission?: number;
    agency?: string;
    flightSource?: definitions["aggregatorFlightSource"];
  };
  domesticflightaggregatorFlightListQuery: {
    originIATA?: string;
    destinationIATA?: string;
    passenger?: definitions["domesticflightaggregatorPassenger"];
    departureDate?: string;
  };
  domesticflightaggregatorGetCreditAmountResponse: {
    /** Format: int64 */
    amount?: string;
  };
  domesticflightaggregatorName: {
    farsi?: string;
    english?: string;
  };
  domesticflightaggregatorPassenger: {
    /** Format: int64 */
    adultCount?: number;
    /** Format: int64 */
    childCount?: number;
    /** Format: int64 */
    infantCount?: number;
  };
  domesticflightaggregatorRefundPolicyItem: {
    Text?: string;
    /** Format: float */
    Percent?: number;
  };
  protobufAny: {
    "@type"?: string;
  } & { [key: string]: unknown };
  rpcStatus: {
    /** Format: int32 */
    code?: number;
    message?: string;
    details?: definitions["protobufAny"][];
  };
}

export interface operations {
  Admin_GetAllAgencies: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorAgencies"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_GetAllAirlines: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorAirlines"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_AddCharterRule: {
    parameters: {
      body: {
        body: definitions["aggregatorAddCharterRuleRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_EditCharterRule: {
    parameters: {
      body: {
        body: definitions["aggregatorEditCharterRuleRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_DeleteCharterRule: {
    parameters: {
      path: {
        batchId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_GetCharterRule: {
    parameters: {
      path: {
        ruleId: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorCharterRule"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_GetCharterRules: {
    parameters: {
      query: {
        ruleTypes?: (
          | "UNDEFINED_RULE"
          | "GENERAL_RULE"
          | "SPECIFIC_RULE"
          | "AGENCY_RULE"
          | "APPROVED_PRICE_RULE"
        )[];
        page?: number;
        limit?: number;
        "filters.isForeign"?: boolean;
        "filters.creationDate"?: string;
        "filters.discount"?: number;
        "filters.markUp"?: number;
        /** مارک آپ عمومی */
        "filters.additionalPrice"?: number;
        "filters.providerId"?: string;
        "filters.agenciesId"?: string[];
        "filters.fromDate"?: string;
        "filters.toDate"?: string;
        "filters.airlineCode"?: string;
        "filters.flightNumber"?: string;
        "filters.originIata"?: string;
        "filters.destinationIata"?: string;
        "filters.userName"?: string;
        "filters.minPrice"?: number;
        "filters.maxPrice"?: number;
        "filters.hasWarn"?: boolean;
        "filters.isActive"?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorCharterRules"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_GetProvidersLimit: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorCreditLimits"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_DeleteCreditLimit: {
    parameters: {
      query: {
        id?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_GetProviderLimit: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorCreditLimit"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_SearchRulesHistory: {
    parameters: {
      query: {
        ruleTypes?: (
          | "UNDEFINED_RULE"
          | "GENERAL_RULE"
          | "SPECIFIC_RULE"
          | "AGENCY_RULE"
          | "APPROVED_PRICE_RULE"
        )[];
        page?: number;
        limit?: number;
        "filters.isForeign"?: boolean;
        "filters.creationDate"?: string;
        "filters.discount"?: number;
        "filters.markUp"?: number;
        /** مارک آپ عمومی */
        "filters.additionalPrice"?: number;
        "filters.providerId"?: string;
        "filters.agenciesId"?: string[];
        "filters.fromDate"?: string;
        "filters.toDate"?: string;
        "filters.airlineCode"?: string;
        "filters.flightNumber"?: string;
        "filters.originIata"?: string;
        "filters.destinationIata"?: string;
        "filters.userName"?: string;
        "filters.minPrice"?: number;
        "filters.maxPrice"?: number;
        "filters.hasWarn"?: boolean;
        "filters.isActive"?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorRulesHistory"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_AddCreditLimit: {
    parameters: {
      body: {
        body: definitions["aggregatorAddCreditLimitRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Cache_GetRules: {
    parameters: {
      query: {
        pageNumber?: number;
        pageLimit?: number;
        "ruleCreationDate.fromDate"?: string;
        "ruleCreationDate.tillDate"?: string;
        ruleNumber?: string;
        originIata?: string;
        destinationIata?: string;
        "ruleValidTillDate.fromDate"?: string;
        "ruleValidTillDate.tillDate"?: string;
        providerName?: string;
        "hotSeasonDate.fromDate"?: string;
        "hotSeasonDate.tillDate"?: string;
        ruleActiveType?:
          | "ACTIVE_TYPE_UNDEFINED"
          | "ACTIVE_TYPE_ACTIVE"
          | "ACTIVE_TYPE_DE_ACTIVE";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorGetAllRulesResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Cache_AddNewRule: {
    parameters: {
      body: {
        body: definitions["aggregatorAddCachePolicyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Cache_EditRule: {
    parameters: {
      body: {
        body: definitions["aggregatorEditCachePolicyRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_CharterFlights: {
    parameters: {
      query: {
        requestID?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorAdminCharterFlightList"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_GetCharterProviders: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorCharterProvidersInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_GetProvidersAgency: {
    parameters: {
      query: {
        providerId?: string;
        agenciesId?: string[];
        limit?: number;
        page?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorProviderAgencies"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_DeleteProvider: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_EditProviderActivation: {
    parameters: {
      path: {
        providerId: string;
      };
      body: {
        body: definitions["ProvidersEditProviderActivationBody"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_ReadAllFrequentCities: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorFrequentAirportCityResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_CreateNewFrequentCity: {
    parameters: {
      body: {
        body: definitions["aggregatorFrequentAirportCityRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Admin_DeleteFrequentCity: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_GetProviders: {
    parameters: {
      query: {
        byProviderNameFa?: string;
        byProviderType?:
          | "UNDEFINED_PROVIDER_TYPE"
          | "SYSTEM_PROVIDER_TYPE"
          | "CHARTER_PROVIDER_TYPE"
          | "BOTH_PROVIDER_TYPE";
        byLastCreditAmount?: string;
        byCreditLimit?: string;
        byLastUpdatedAt?: string;
        activation?: "OnlyActives" | "All";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorGetProvidersResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_AddProvider: {
    parameters: {
      body: {
        body: definitions["aggregatorProvider"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: { [key: string]: unknown };
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Providers_ListProvidersNameOnly: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorProvidersNameOnly"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_Airports: {
    parameters: {
      query: {
        query?: string;
        domestic?: boolean;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorAirportSearchResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_GetCalenderData: {
    parameters: {
      query: {
        departureIata?: string;
        arrivalIata?: string;
        startDate?: string;
        endDate?: string;
        calendarType?: "PERSIAN" | "GREGORIAN";
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorGetCalenderDataResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_GetFlightClient: {
    parameters: {
      query: {
        flightId?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["domesticflightaggregatorFlightInfo"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_AlertData: {
    parameters: {
      query: {
        originIATA?: string;
        destinationIATA?: string;
        departureDate?: string;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorAlertDataResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_SetAlert: {
    parameters: {
      body: {
        body: definitions["aggregatorSetAlertRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorSetAlertResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_FlightList: {
    parameters: {
      query: {
        requestID?: string;
        page?: number;
        limit?: number;
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorFlightListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_PrepareFlightList: {
    parameters: {
      body: {
        body: definitions["aggregatorPrepareFlightListRequest"];
      };
    };
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorPrepareFlightListResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
  Flight_ReadAllFrequentCities: {
    responses: {
      /** A successful response. */
      200: {
        schema: definitions["aggregatorFrequentAirportCityResponse"];
      };
      /** An unexpected error response. */
      default: {
        schema: definitions["rpcStatus"];
      };
    };
  };
}

export interface external {}
